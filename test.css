Ah, this SSL error "EOF occurred in violation of protocol (_ssl.c:1006)" typically occurs when there's an SSL/TLS handshake failure. Here are a few ways to handle this:

1. First approach - Add SSL context with certificate verification:

```python
import ssl

def call_llm_api(prompt: str) -> dict:
    """
    Call the LLM API with the given prompt
    """
    # Create SSL context
    context = ssl.create_default_context()
    # If you're using self-signed certificates, you might need:
    context.check_hostname = False
    context.verify_mode = ssl.CERT_NONE  # Warning: This reduces security, use only for testing
    
    # Create HTTPS connection with SSL context
    conn = http.client.HTTPSConnection("10.50.66.58", 8001, context=context)
    
    # Rest of your code remains the same
    payload = json.dumps({
        "model": "model1",
        "prompt": prompt,
        "max_tokens": 256,
        "min_tokens": 128
    })
    # ...
```

2. Alternative approach - Using requests library (generally more reliable for HTTPS):

```python
import requests

def call_llm_api(prompt: str) -> dict:
    """
    Call the LLM API with the given prompt
    """
    url = "https://10.50.66.58:8001/v1/completions"
    
    payload = {
        "model": "model1",
        "prompt": prompt,
        "max_tokens": 256,
        "min_tokens": 128
    }
    
    headers = {
        'Content-Type': 'application/json'
    }
    
    try:
        # For self-signed certificates, use verify=False (only for testing)
        response = requests.post(url, json=payload, headers=headers, verify=False)
        response.raise_for_status()  # Raises an exception for 4XX/5XX status codes
        return response.json()
    except requests.exceptions.RequestException as e:
        return {"error": str(e)}
    except json.JSONDecodeError as e:
        return {"error": "Failed to decode response: " + str(e)}
```

Important Security Notes:
1. Using `verify=False` or `CERT_NONE` disables certificate verification - only use this for testing or with trusted networks
2. For production:
   - Use proper SSL certificates
   - Enable certificate verification
   - Consider adding certificate pinning
   - Don't skip hostname verification

Would you like me to explain how to properly set up certificate verification for production use?