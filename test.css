import React, { useState, useRef, useEffect } from 'react';

function GPTInterface() {
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [loading, setLoading] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!inputValue.trim() || loading) return;

    const userMessage = { role: 'user', content: inputValue };
    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setLoading(true);

    try {
      const response = await fetch('http://10.50.66.58:8081/v1/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'model1',
          prompt: inputValue,
          max_tokens: 256,
          min_tokens: 128
        }),
      });

      const data = await response.json();
      const assistantMessage = {
        role: 'assistant',
        content: data.choices?.[0]?.text || 'No response generated',
        raw: data
      };
      setMessages(prev => [...prev, assistantMessage]);
    } catch (err) {
      const errorMessage = {
        role: 'assistant',
        content: 'Sorry, I encountered an error processing your request.',
        error: true
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setLoading(false);
    }
  };

  const clearChat = () => {
    setMessages([]);
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Chat container */}
      <div className="flex-1 flex flex-col max-w-5xl mx-auto p-4">
        {/* Messages area */}
        <div className="flex-1 overflow-y-auto bg-white rounded-lg shadow-sm p-4 mb-4">
          {messages.length === 0 && (
            <div className="text-center text-gray-500 my-8">
              <h2 className="text-2xl font-semibold mb-2">Start a conversation</h2>
              <p>Ask anything to get started...</p>
            </div>
          )}
          
          {messages.map((message, index) => (
            <div
              key={index}
              className={`mb-4 ${message.role === 'user' ? 'ml-auto' : 'mr-auto'} max-w-[80%]`}
            >
              <div className={`p-3 rounded-lg ${
                message.role === 'user' 
                  ? 'bg-blue-500 text-white ml-auto' 
                  : message.error 
                    ? 'bg-red-100 text-red-900'
                    : 'bg-gray-100 text-gray-900'
              }`}>
                <pre className="whitespace-pre-wrap font-sans">
                  {message.content}
                </pre>
                
                {message.raw && (
                  <details className="mt-2">
                    <summary className="cursor-pointer text-sm opacity-70">
                      Show raw response
                    </summary>
                    <pre className="mt-2 p-2 bg-gray-800 text-gray-200 rounded text-sm overflow-auto">
                      {JSON.stringify(message.raw, null, 2)}
                    </pre>
                  </details>
                )}
              </div>
            </div>
          ))}
          
          {loading && (
            <div className="flex items-center gap-2 p-4">
              <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce" />
              <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce delay-150" />
              <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce delay-300" />
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Input area */}
        <div className="bg-white rounded-lg shadow-sm p-4">
          <form onSubmit={handleSubmit} className="flex gap-2">
            <input
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              placeholder="Type your message..."
              className="flex-1 p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              disabled={loading}
            />
            <button
              type="submit"
              disabled={loading || !inputValue.trim()}
              className={`px-4 py-2 rounded-lg font-medium ${
                loading || !inputValue.trim()
                  ? 'bg-gray-300 cursor-not-allowed'
                  : 'bg-blue-500 hover:bg-blue-600 text-white'
              }`}
            >
              Send
            </button>
            <button
              type="button"
              onClick={clearChat}
              className="px-4 py-2 rounded-lg font-medium text-gray-700 hover:bg-gray-100"
            >
              Clear
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}

export default GPTInterface;