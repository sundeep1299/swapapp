import React, { useState, useRef, useEffect } from 'react';
import './GPTInterface.css';

function GPTInterface() {
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!inputValue.trim() || isLoading) return;

    // Add user message
    setMessages(prev => [...prev, { type: 'user', content: inputValue }]);
    setInputValue('');
    setIsLoading(true);

    try {
      const response = await fetch('http://10.50.66.58:8081/v1/completions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          model: 'model1',
          prompt: inputValue,
          max_tokens: 256,
          min_tokens: 128
        }),
      });

      const data = await response.json();
      setMessages(prev => [...prev, {
        type: 'assistant',
        content: data.choices?.[0]?.text || 'No response generated',
        raw: data
      }]);
    } catch (error) {
      setMessages(prev => [...prev, {
        type: 'error',
        content: 'Sorry, something went wrong. Please try again.'
      }]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="chat-container">
      <div className="messages-area">
        {messages.length === 0 && (
          <div className="welcome-message">
            <h2>Welcome to Chat</h2>
            <p>Start a conversation by typing a message below.</p>
          </div>
        )}

        {messages.map((message, index) => (
          <div key={index} className={`message ${message.type}-message`}>
            {message.content}
            {message.raw && (
              <div className="details-view">
                <details>
                  <summary>View details</summary>
                  <pre>{JSON.stringify(message.raw, null, 2)}</pre>
                </details>
              </div>
            )}
          </div>
        ))}

        {isLoading && (
          <div className="loading">
            <div className="loading-dot"></div>
            <div className="loading-dot"></div>
            <div className="loading-dot"></div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      <div className="input-area">
        <form onSubmit={handleSubmit} className="input-form">
          <input
            type="text"
            className="input-field"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            placeholder="Type your message..."
            disabled={isLoading}
          />
          <button
            type="submit"
            className="send-button"
            disabled={isLoading || !inputValue.trim()}
          >
            Send
          </button>
        </form>
      </div>
    </div>
  );
}

export default GPTInterface;