import React, { useState, useRef, useEffect } from 'react';
import './App.css';

function ChatInterface() {
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!inputValue.trim() || isLoading) return;

    // Add user message
    setMessages(prev => [...prev, { type: 'user', content: inputValue }]);
    setInputValue('');
    setIsLoading(true);

    try {
      const response = await fetch('http://10.50.66.58:8081/v1/completions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          model: 'model1',
          prompt: inputValue,
          max_tokens: 256,
          min_tokens: 128
        }),
      });

      const data = await response.json();
      setMessages(prev => [...prev, {
        type: 'assistant',
        content: data.choices?.[0]?.text || 'No response generated',
        raw: data
      }]);
    } catch (error) {
      setMessages(prev => [...prev, {
        type: 'error',
        content: 'Sorry, something went wrong. Please try again.'
      }]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex h-screen bg-slate-100">
      <div className="flex-1 flex flex-col max-w-5xl mx-auto p-4">
        {/* Chat container */}
        <div className="flex-1 flex flex-col space-y-4 overflow-y-auto p-4 rounded-lg bg-white shadow-sm">
          {messages.length === 0 && (
            <div className="flex-1 flex items-center justify-center text-center p-8">
              <div className="max-w-sm">
                <h2 className="text-2xl font-semibold text-gray-700 mb-2">Welcome!</h2>
                <p className="text-gray-500">Start a conversation by typing a message below.</p>
              </div>
            </div>
          )}

          {messages.map((message, index) => (
            <div
              key={index}
              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div className={`max-w-[80%] rounded-xl px-4 py-2 shadow-sm
                ${message.type === 'user' 
                  ? 'bg-blue-600 text-white rounded-br-none' 
                  : message.type === 'error'
                    ? 'bg-red-100 text-red-800 rounded-bl-none'
                    : 'bg-gray-100 text-gray-800 rounded-bl-none'}`}
              >
                <div className="whitespace-pre-wrap">{message.content}</div>
                {message.raw && (
                  <details className="mt-2">
                    <summary className="cursor-pointer text-sm opacity-80 hover:opacity-100">
                      View details
                    </summary>
                    <pre className="mt-2 p-2 text-xs bg-black/5 rounded overflow-x-auto">
                      {JSON.stringify(message.raw, null, 2)}
                    </pre>
                  </details>
                )}
              </div>
            </div>
          ))}

          {isLoading && (
            <div className="flex items-center space-x-2 p-4">
              <div className="flex space-x-1.5">
                <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce"></div>
                <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce delay-100"></div>
                <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce delay-200"></div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        {/* Input form */}
        <div className="mt-4">
          <form onSubmit={handleSubmit} className="flex space-x-4">
            <input
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              placeholder="Type your message..."
              className="flex-1 p-4 rounded-xl border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              disabled={isLoading}
            />
            <button
              type="submit"
              disabled={isLoading || !inputValue.trim()}
              className={`px-6 rounded-xl font-medium transition-colors
                ${isLoading || !inputValue.trim()
                  ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                  : 'bg-blue-600 text-white hover:bg-blue-700'}`}
            >
              Send
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}

export default ChatInterface;