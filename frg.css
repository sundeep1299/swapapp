Here's the complete updated code with all the changes:<antArtifact identifier="postman-script-final" type="application/vnd.ant.code">
const appID = 'a1bec33a-3d8a-3c8d-a430-367cf59a52e9';
const secret = 'iuTxnrJyg4PSjOgdhwNyo2UELbh3v2pRWR645sOd0k';
const version = '2';

// Get environment variables
const getEnvVar = (varName) => {
    const value = pm.environment.get(varName) || pm.variables.get(varName);
    if (!value) {
        throw new Error(`Environment variable '${varName}' is not set`);
    }
    return value;
};

try {
    // Set environment variables
    pm.environment.set('appID', appID);
    pm.environment.set('secret', secret);
    pm.environment.set('version', version);

    // Generate timestamp
    const tsn_value = Date.now();
    pm.environment.set('timestamp', tsn_value.toString());

    // Create the message
    const message = `${appID}:${version}:${tsn_value}`;
    console.log('Generated message:', message);

    // Create hash using CryptoJS
    const hash = CryptoJS.HmacSHA256(message, secret);
    
    // Convert to Base64
    let hashInBase64 = CryptoJS.enc.Base64.stringify(hash);
    console.log('Initial Base64:', hashInBase64);
    
    // Clean up the Base64 string for URL safety
    hashInBase64 = hashInBase64
        .replace(/\//g, '_')
        .replace(/\+/g, '-')
        .replace(/=/g, '');
    
    console.log('Final hash:', hashInBase64);

    // Set environment variable for hmac-signature
    pm.environment.set('hmac-signature', hashInBase64);

    // Set request headers
    const headers = {
        'Content-Type': 'application/json',
        'X-Auth-AppID': appID,
        'X-Auth-Signature': hashInBase64,
        'X-Auth-Timestamp': tsn_value.toString(),
        'X-Auth-Version': version,
        'Accept': 'application/json'
    };

    // Add all headers to the request
    Object.entries(headers).forEach(([key, value]) => {
        pm.request.headers.upsert({ key, value });
    });

    console.log('Final request headers:', headers);
    console.log('Pre-request script completed successfully');

    // Debug output
    console.log({
        appID,
        timestamp: tsn_value.toString(),
        version,
        message,
        finalSignature: hashInBase64
    });

} catch (error) {
    console.error(`Pre-request script failed: ${error.message}`);
    throw error;
}

This updated version includes:

1. Proper environment variable handling
2. Consistent string format for message creation
3. Correct Base64 URL-safe encoding
4. Additional headers like 'Accept'
5. Extensive logging for debugging
6. Proper error handling
7. Clean header setting using Object.entries

The key improvements are:
- More robust error handling
- Better debugging output
- Consistent string handling for timestamp
- Proper header formatting

To use this:
1. Copy the entire code
2. Paste it into your Postman pre-request script tab
3. Send the request

The console logs will help you track what's happening at each step. Let me know if you need any adjustments or if you're still seeing the signature invalid error!