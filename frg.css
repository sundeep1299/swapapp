 Certainly! We can modify the component to track which button was last clicked and change its color accordingly. Here's how we can update the `ProjectSelection` component to achieve this:

1. First, let's add a new state to keep track of the active button:

```jsx
const [activeButton, setActiveButton] = useState(null);
```

2. Then, let's modify our fetch functions to update this state:

```jsx
const fetchDataProc = () => {
  setActiveButton('dataProc');
  fetchData('data_proc');
};

const fetchManagedNotebooks = () => {
  setActiveButton('managedNotebooks');
  fetchData('managed_notebooks');
};

const fetchWorkbenchInstances = () => {
  setActiveButton('workbenchInstances');
  fetchData('workbench_instance');
};
```

3. Now, let's update our buttons to use a custom class when they're active:

```jsx
<div className="button-group">
  <ButtonPrimary 
    icon={<IconSetting title="Data Proc" />} 
    onClick={fetchDataProc} 
    disabled={loading}
    className={activeButton === 'dataProc' ? 'active-button' : ''}
  >
    {loading && activeButton === 'dataProc' ? 'Loading...' : 'Data Proc'}
  </ButtonPrimary>
  <ButtonPrimary 
    icon={<IconSetting title="Managed Notebooks" />} 
    onClick={fetchManagedNotebooks} 
    disabled={loading}
    className={activeButton === 'managedNotebooks' ? 'active-button' : ''}
  >
    {loading && activeButton === 'managedNotebooks' ? 'Loading...' : 'Managed Notebooks'}
  </ButtonPrimary>
  <ButtonPrimary 
    icon={<IconSetting title="Workbench Instances" />} 
    onClick={fetchWorkbenchInstances} 
    disabled={loading}
    className={activeButton === 'workbenchInstances' ? 'active-button' : ''}
  >
    {loading && activeButton === 'workbenchInstances' ? 'Loading...' : 'Workbench Instances'}
  </ButtonPrimary>
</div>
```

4. Finally, let's add some CSS to style the active button. Add this to your CSS file:

```css
.active-button {
  background-color: #4CAF50 !important; /* Green background */
  color: white !important;
  border-color: #45a049 !important;
}

.active-button:hover {
  background-color: #45a049 !important;
}

.button-group button {
  transition: all 0.3s ease;
}
```

This CSS assumes that the `ButtonPrimary` component from '@americanexpress/dls-react' allows overriding its styles. If it doesn't, you might need to adjust your approach or use a custom button component.

Here's the complete updated `ProjectSelection` component:

```jsx
import React, { useState } from 'react';
import { useAuthBlueSso } from 'use-authblue-sso';
import { ButtonPrimary, IconSetting } from '@americanexpress/dls-react';
import './ProjectSelection.css';
import gcpLogo from './gcp-logo.png';

const ProjectSelection = () => {
  const [resources, setResources] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [activeButton, setActiveButton] = useState(null);
  const { user } = useAuthBlueSso();

  const fetchData = async (endpoint) => {
    setLoading(true);
    setError(null);
    try {
      const userId = user?.attributes?.adsid || 'vsing379';
      const response = await fetch(`https://lumiqcpauto-dev.aexp.com/terraform/automate/${endpoint}/${userId}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
        },
        credentials: 'include'
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      setResources(data);
    } catch (e) {
      console.error(`Error fetching ${endpoint}:`, e);
      setError(`Failed to fetch ${endpoint}. Please try again.`);
    } finally {
      setLoading(false);
    }
  };

  const fetchDataProc = () => {
    setActiveButton('dataProc');
    fetchData('data_proc');
  };

  const fetchManagedNotebooks = () => {
    setActiveButton('managedNotebooks');
    fetchData('managed_notebooks');
  };

  const fetchWorkbenchInstances = () => {
    setActiveButton('workbenchInstances');
    fetchData('workbench_instance');
  };

  // ... (parseConfig function remains the same)

  return (
    <div className="project-selection">
      <h2>GCP Resources</h2>
      <div className="button-group">
        <ButtonPrimary 
          icon={<IconSetting title="Data Proc" />} 
          onClick={fetchDataProc} 
          disabled={loading}
          className={activeButton === 'dataProc' ? 'active-button' : ''}
        >
          {loading && activeButton === 'dataProc' ? 'Loading...' : 'Data Proc'}
        </ButtonPrimary>
        <ButtonPrimary 
          icon={<IconSetting title="Managed Notebooks" />} 
          onClick={fetchManagedNotebooks} 
          disabled={loading}
          className={activeButton === 'managedNotebooks' ? 'active-button' : ''}
        >
          {loading && activeButton === 'managedNotebooks' ? 'Loading...' : 'Managed Notebooks'}
        </ButtonPrimary>
        <ButtonPrimary 
          icon={<IconSetting title="Workbench Instances" />} 
          onClick={fetchWorkbenchInstances} 
          disabled={loading}
          className={activeButton === 'workbenchInstances' ? 'active-button' : ''}
        >
          {loading && activeButton === 'workbenchInstances' ? 'Loading...' : 'Workbench Instances'}
        </ButtonPrimary>
      </div>
      
      {error && <p className="error-message">{error}</p>}
      
      {resources.length > 0 && (
        <div className="table-container">
          <div className="table-header">
            <img src={gcpLogo} alt="GCP Logo" className="gcp-logo" />
            <h3 className="table-title">GCP Resource List</h3>
          </div>
          <table className="resources-table">
            {/* ... (table header and body remain the same) ... */}
          </table>
        </div>
      )}
    </div>
  );
};

export default ProjectSelection;
```

This implementation will change the color of the button that was last clicked, providing visual feedback to the user about which type of resources are currently being displayed.
