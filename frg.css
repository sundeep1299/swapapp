import requests
import json
import time

def get_auth_token():
    url = "https://aexp.oktapreview.com/oauth2/aus1kh0oh8jY8jwqJ0h8/v1/token"
    payload = 'username=svc.aj.aida-lumi-api&password=A!daLum1&scope=openid&grant_type=password'
    headers = {
        'Authorization': 'Basic MG9hMWtoMGw2eHdBWHQ2cWswaDg=',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Cookie': 'JSESSIONID=629322A413F1640648ECAE4A6990A0EB; JSESSIONID=6D6EDD58E277FC49B9E8F56990EF858D'
    }
    response = requests.request("POST", url, headers=headers, data=payload)
    return json.loads(response.text)['access_token']

def create_workbench_instance(auth_token):
    url = "https://lumigcpauto-qa.aexp.com/un/v2/terraform/automate/workbench_instance"
    payload = json.dumps({
        "project_id": "prj-t-au-product",
        "instance_name": "workbench-kva116",
        "env": "e2",
        "machine_type": "n2d-standard-4",
        "version": "0.0.8",
        "region": "us-central1",
        "source": "private/aexp/lumi-workbench-instance/google",
        "initialize_params": {
            "disk_size_gb": "200",
            "disk_type": "pd-ssd"
        },
        "vm_image": {
            "family": "workbench-instances",
            "project": "cloud-notebooks-managed"
        },
        "adsId": "gvenk9",
        "runtime_owner": "kasiviswanadham.vallabhaneni@aexp.com",
        "idle_shutdown_timeout": "120",
        "labels": {
            "team": "lumi",
            "ads-id": "kva116"
        },
        "metadata": {
            "disable-mixer": "True"
        }
    })
    headers = {
        'Authorization': f'Bearer {auth_token}',
        'Content-Type': 'application/json'
    }
    response = requests.request("POST", url, headers=headers, data=payload)
    return json.loads(response.text)

def check_instance_status(auth_token, resource_name):
    url = f"https://lumigcpauto-qa.aexp.com/un/gcp/status/{resource_name}"
    headers = {
        'Authorization': f'Bearer {auth_token}',
        'Content-Type': 'application/json'
    }
    response = requests.request("GET", url, headers=headers)
    return json.loads(response.text)

def main():
    # Step 1: Get Auth Token
    auth_token = get_auth_token()
    print("Auth Token obtained successfully.")

    # Step 2: Create Workbench Instance
    create_response = create_workbench_instance(auth_token)
    resource_name = create_response.get('resourceName')
    if not resource_name:
        print("Failed to create workbench instance. Response:", create_response)
        return

    print(f"Workbench instance creation initiated. Resource Name: {resource_name}")

    # Step 3: Check Instance Status (poll every 30 seconds for 10 minutes)
    for _ in range(20):
        status_response = check_instance_status(auth_token, resource_name)
        status = status_response.get('status', 'UNKNOWN')
        print(f"Current status: {status}")
        print(f"Resource: {status_response.get('resource', 'N/A')}")
        print(f"Workspace name: {status_response.get('workspace_name', 'N/A')}")
        
        if status == 'ACTIVE':
            print("Workbench instance is now active!")
            break
        elif status != 'PENDING':
            print(f"Unexpected status: {status}. Stopping the check.")
            break
        
        time.sleep(30)
    else:
        print("Timeout: Workbench instance did not become active within the expected time.")

if __name__ == "__main__":
    main()