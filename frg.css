 Certainly! I see that the JSON response includes a `config` field with HCL (HashiCorp Configuration Language) content. We'll need to parse this and include relevant information in our table. Let's update the component to include these additional details. Here's a revised version of the `ProjectSelection` component:

```jsx
import React, { useState } from 'react';
import { useAuthBlueSso } from 'use-authblue-sso';
import { ButtonPrimary, IconSetting } from '@americanexpress/dls-react';
import './ProjectSelection.css';
import gcpLogo from './gcp-logo.png'; // Ensure this image is in your project

const ProjectSelection = () => {
  const [resources, setResources] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const { user } = useAuthBlueSso();

  const fetchResources = async () => {
    // ... (fetchResources implementation remains the same)
  };

  // Helper function to extract relevant info from config
  const parseConfig = (config) => {
    const projectIdMatch = config.match(/project_id\s*=\s*"([^"]+)"/);
    const envMatch = config.match(/env\s*=\s*"([^"]+)"/);
    const regionMatch = config.match(/region\s*=\s*"([^"]+)"/);
    return {
      projectId: projectIdMatch ? projectIdMatch[1] : 'N/A',
      env: envMatch ? envMatch[1] : 'N/A',
      region: regionMatch ? regionMatch[1] : 'N/A'
    };
  };

  return (
    <div className="project-selection">
      <h2>GCP Cluster Resources</h2>
      <ButtonPrimary 
        icon={<IconSetting title="setting" />} 
        onClick={fetchResources} 
        disabled={loading}
      >
        {loading ? 'Loading...' : 'My GCP Resources'}
      </ButtonPrimary>
      
      {error && <p className="error-message">{error}</p>}
      
      {resources.length > 0 && (
        <div className="table-container">
          <div className="table-header">
            <img src={gcpLogo} alt="GCP Logo" className="gcp-logo" />
            <h3 className="table-title">GCP Resource List</h3>
          </div>
          <table className="resources-table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Created By</th>
                <th>Status</th>
                <th>Project ID</th>
                <th>Environment</th>
                <th>Region</th>
                <th>Created At</th>
                <th>Updated At</th>
              </tr>
            </thead>
            <tbody>
              {resources.map((resource, index) => {
                const configInfo = parseConfig(resource.config);
                return (
                  <tr key={index}>
                    <td>{resource.name}</td>
                    <td>{resource.type}</td>
                    <td>{resource.createdBy}</td>
                    <td>{resource.status}</td>
                    <td>{configInfo.projectId}</td>
                    <td>{configInfo.env}</td>
                    <td>{configInfo.region}</td>
                    <td>{new Date(resource.createdat).toLocaleString()}</td>
                    <td>{new Date(resource.updatedat).toLocaleString()}</td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default ProjectSelection;
```

Now, let's update the CSS to accommodate the wider table:

```css
/* ... (previous CSS remains the same) */

.resources-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.9em; /* Reduced font size to fit more columns */
}

.resources-table th,
.resources-table td {
  padding: 8px 10px; /* Reduced padding */
  text-align: left;
  border-bottom: 1px solid #ddd;
  white-space: nowrap; /* Prevents wrapping */
  overflow: hidden;
  text-overflow: ellipsis; /* Adds ... for overflowing text */
}

.resources-table th {
  background-color: #f8f8f8;
  font-weight: bold;
  color: #333;
  text-transform: uppercase;
  font-size: 0.8em; /* Even smaller font for headers */
}

/* Add horizontal scrolling for the table container */
.table-container {
  overflow-x: auto;
}

/* ... (rest of the CSS remains the same) */
```

These changes include:

1. A new `parseConfig` function to extract relevant information from the HCL-like config string.
2. Additional columns in the table for Project ID, Environment, Region, Status, Created At, and Updated At.
3. Updated CSS to handle the wider table, including horizontal scrolling and text overflow handling.

This setup provides a more comprehensive view of your GCP resources, including the information parsed from the config field. The table is now scrollable horizontally to accommodate all the new columns.

Remember to adjust the parsing logic in the `parseConfig` function if you need to extract different or additional information from the config string.