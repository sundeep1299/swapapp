 I apologize for the misunderstanding. Thank you for the correction. You're right, the "proxyUri" is directly under the "gcp" object, not nested inside "gceSetup". Let's modify the function to correctly extract this information:

```python
def check_instance_status(auth_token, resource_name):
    url = f"https://lumigcpauto-qa.aexp.com/un/gcp/status/{resource_name}"
    headers = {
        'Authorization': f'Bearer {auth_token}',
        'Content-Type': 'application/json'
    }
    response = requests.request("GET", url, headers=headers, verify=False)
    status_data = json.loads(response.text)
    
    # Extract and print the status
    status = status_data.get('status', 'UNKNOWN')
    print(f"Current status: {status}")
    
    # Extract and print the proxyUri if it exists
    if 'gcp' in status_data:
        proxy_uri = status_data['gcp'].get('proxyUri')
        if proxy_uri:
            print(f"Proxy URL: {proxy_uri}")
        else:
            print("Proxy URL not found in the response")
    else:
        print("GCP data not found in the response")
    
    return status_data

# In your main loop or wherever you call check_instance_status:
status_response = check_instance_status(auth_token, resource_name)
```

This updated version:

1. Looks for the "gcp" key directly in the status_data dictionary.
2. If "gcp" exists, it tries to get the "proxyUri" from it.
3. If "proxyUri" is found, it prints it.
4. If either "gcp" or "proxyUri" is not found, it prints an appropriate message.

This should correctly extract and print the Proxy URL from the structure shown in your image. The function will also gracefully handle cases where the expected data might be missing.