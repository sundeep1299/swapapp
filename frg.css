import React, { useState } from 'react';
import { DatePicker } from '@americanexpress/dls-react';
import { ButtonPrimary } from '@americanexpress/dls-react';
import { Input } from '@americanexpress/dls-react';
import { Select, SelectOption } from '@americanexpress/dls-react';
import { Label } from '@americanexpress/dls-react';

const StatusForm = () => {
  const [formData, setFormData] = useState({
    projectName: '',
    priority: '',
    jiraLink: '',
    arbApprovalDate: '',
    projectBuildStartDate: '',
    projectBuildStartStep1: '',
    aclRaisedDate: '',
    firewallReqCompleteDate: '',
    projectBuildDate: '',
    projectValidationDate: '',
    projectHandoverDate: '',
    issues: '',
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
  };

  const handleDateChange = (name) => (date) => {
    setFormData(prevState => ({
      ...prevState,
      [name]: date
    }));
  };

  const handleSubmit = (fieldName) => (e) => {
    e.preventDefault();
    console.log(`Submitted ${fieldName}:`, formData[fieldName]);
    // Here you would typically send the specific field data to your backend
    alert(`Submitted ${fieldName}: ${formData[fieldName]}`);
  };

  const renderField = (label, name, type = "text") => (
    <div style={styles.fieldContainer}>
      <Label htmlFor={name}>{label}</Label>
      {type === "select" ? (
        <Select name={name} value={formData[name]} onChange={handleChange} required>
          <SelectOption value="">Select Priority</SelectOption>
          <SelectOption value="p0">P0</SelectOption>
          <SelectOption value="p1">P1</SelectOption>
          <SelectOption value="p2">P2</SelectOption>
          <SelectOption value="p3">P3</SelectOption>
        </Select>
      ) : type === "date" ? (
        <DatePicker
          id={name}
          name={name}
          value={formData[name]}
          onChange={handleDateChange(name)}
          required
        />
      ) : (
        <Input
          type={type}
          id={name}
          name={name}
          value={formData[name]}
          onChange={handleChange}
          required
        />
      )}
      <ButtonPrimary type="button" onClick={handleSubmit(name)}>Submit</ButtonPrimary>
    </div>
  );

  return (
    <div style={styles.teamSegregatedForm}>
      <div style={styles.teamRow}>
        <div style={styles.teamName}>UCE</div>
        <div style={styles.teamFields}>
          {renderField("Project Name", "projectName")}
          {renderField("Priority", "priority", "select")}
          {renderField("Jira Link", "jiraLink")}
          {renderField("ARB Approval Date", "arbApprovalDate", "date")}
        </div>
      </div>
      <div style={styles.teamRow}>
        <div style={styles.teamName}>Platform Engineering</div>
        <div style={styles.teamFields}>
          {renderField("Project Build Start Date", "projectBuildStartDate", "date")}
          {renderField("Project Build Start Step 1", "projectBuildStartStep1", "date")}
        </div>
      </div>
      <div style={styles.teamRow}>
        <div style={styles.teamName}>UCE</div>
        <div style={styles.teamFields}>
          {renderField("ACL Raised Date", "aclRaisedDate", "date")}
          {renderField("Firewall Request Complete Date", "firewallReqCompleteDate", "date")}
        </div>
      </div>
      <div style={styles.teamRow}>
        <div style={styles.teamName}>Platform Engineering</div>
        <div style={styles.teamFields}>
          {renderField("Project Build Date", "projectBuildDate", "date")}
          {renderField("Project Validation Date", "projectValidationDate", "date")}
          {renderField("Project Handover Date", "projectHandoverDate", "date")}
          {renderField("Issues / Remarks", "issues", "textarea")}
        </div>
      </div>
    </div>
  );
};

const styles = {
  teamSegregatedForm: {
    display: 'table',
    width: '100%',
  },
  teamRow: {
    display: 'table-row',
  },
  teamName: {
    display: 'table-cell',
    width: '200px',
    padding: '10px',
    fontWeight: 'bold',
    verticalAlign: 'top',
  },
  teamFields: {
    display: 'table-cell',
    padding: '10px',
  },
  fieldContainer: {
    marginBottom: '15px',
  },
};

export default StatusForm;
