```python
import requests
import json
import openpyxl
from datetime import datetime
import os
import warnings
from requests.packages.urllib3.exceptions import InsecureRequestWarning

warnings.simplefilter('ignore', InsecureRequestWarning)

def get_auth_token():
    url = "https://aexp.oktapreview.com/oauth2/aus1kh0oh8jY8jwqJ0h8/v1/token"
    payload = 'username=svc.aj.aida-lumi-api&password=A!daLum1&scope=openid&grant_type=password'
    headers = {
        'Authorization': 'Basic MG9hMWtoMGw2eHdBWHQ2cWswaDg=',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Cookie': 'JSESSIONID=629322A413F1640648ECAE4A6990A0EB; JSESSIONID=6D6EDD58E277FC49B9E8F56990EF858D'
    }
    response = requests.request("POST", url, headers=headers, data=payload, verify=False)
    return json.loads(response.text)['access_token']

def read_workbench_data(filename="workbench_instances_log.xlsx"):
    """Read workbench data from Excel file"""
    try:
        wb = openpyxl.load_workbook(filename)
        ws = wb.active
        
        # Get headers
        headers = [cell.value for cell in ws[1]]
        resource_col = headers.index('Resource Name') + 1
        status_col = headers.index('Status') + 1
        
        # Read data
        workbench_data = []
        for row in range(2, ws.max_row + 1):
            resource_name = ws.cell(row=row, column=resource_col).value
            status = ws.cell(row=row, column=status_col).value
            
            if resource_name and resource_name != 'N/A':
                workbench_data.append({
                    'row': row,
                    'resource_name': resource_name,
                    'status': status
                })
        
        return workbench_data, wb, ws
    except Exception as e:
        print(f"Error reading Excel file: {str(e)}")
        return None, None, None

def check_instance_status(auth_token, resource_name):
    """Get status for a workbench instance"""
    url = f"https://lumigcpauto.aexp.com/un/gcp/status/{resource_name}"
    headers = {
        'Authorization': f'Bearer {auth_token}',
        'Content-Type': 'application/json'
    }
    response = requests.request("GET", url, headers=headers, verify=False)
    return json.loads(response.text)

def update_excel_with_url(wb, ws, row, url):
    """Update Excel with URL information"""
    # Add Proxy URI column if it doesn't exist
    headers = [cell.value for cell in ws[1]]
    if 'Proxy URI' not in headers:
        next_col = ws.max_column + 1
        ws.cell(row=1, column=next_col, value='Proxy URI')
        url_col = next_col
    else:
        url_col = headers.index('Proxy URI') + 1
    
    # Update URL
    ws.cell(row=row, column=url_col, value=url)
    return wb, ws

def main():
    print("Starting workbench URL fetch process...")
    
    # Step 1: Read workbench data from Excel
    workbench_data, wb, ws = read_workbench_data()
    if not workbench_data:
        print("No workbench instances found to process")
        return
    
    # Step 2: Get authentication token
    auth_token = get_auth_token()
    print("Auth Token obtained successfully.")
    
    # Step 3: Process each instance
    for data in workbench_data:
        print(f"\nProcessing instance: {data['resource_name']}")
        
        # Skip if status indicates creation failed
        if data['status'] == 'CREATION_FAILED':
            print("Skipping due to CREATION_FAILED status")
            wb, ws = update_excel_with_url(wb, ws, data['row'], 'N/A')
            continue
        
        try:
            # Get status and URL
            status_response = check_instance_status(auth_token, data['resource_name'])
            proxy_uri = status_response.get('gcp', {}).get('proxyUri', 'N/A')
            
            # Add https:// if URL exists
            if proxy_uri != 'N/A':
                proxy_uri = f"https://{proxy_uri}"
            
            print(f"Found URL: {proxy_uri}")
            
            # Update Excel
            wb, ws = update_excel_with_url(wb, ws, data['row'], proxy_uri)
            
        except Exception as e:
            print(f"Error processing instance: {str(e)}")
            wb, ws = update_excel_with_url(wb, ws, data['row'], 'Error')
    
    # Step 4: Save the workbook
    try:
        wb.save("workbench_instances_log.xlsx")
        print("\nSuccessfully updated Excel file with URLs")
    except Exception as e:
        print(f"Error saving Excel file: {str(e)}")

if __name__ == "__main__":
    main()
```