 I understand. Based on the JSON response shown in your image, you want to extract and print the "proxyUri" value from the response. Here's how you can modify your `check_instance_status` function to accomplish this:

```python
def check_instance_status(auth_token, resource_name):
    url = f"https://lumigcpauto-qa.aexp.com/un/gcp/status/{resource_name}"
    headers = {
        'Authorization': f'Bearer {auth_token}',
        'Content-Type': 'application/json'
    }
    response = requests.request("GET", url, headers=headers, verify=False)
    status_data = json.loads(response.text)
    
    # Extract and print the status
    status = status_data.get('status', 'UNKNOWN')
    print(f"Current status: {status}")
    
    # Extract and print the proxyUri if it exists
    if 'gcp' in status_data and 'gceSetup' in status_data['gcp']:
        proxy_uri = status_data['gcp']['gceSetup'].get('proxyUri')
        if proxy_uri:
            print(f"Proxy URL: {proxy_uri}")
        else:
            print("Proxy URL not found in the response")
    else:
        print("Required data structure not found in the response")
    
    return status_data

# In your main loop or wherever you call check_instance_status:
status_response = check_instance_status(auth_token, resource_name)
```

This modification does the following:

1. It parses the JSON response into a Python dictionary.
2. It extracts and prints the overall status as before.
3. It then checks if the required nested structure (`gcp` -> `gceSetup` -> `proxyUri`) exists in the response.
4. If the structure exists, it extracts and prints the `proxyUri`.
5. If at any point the expected data is not found, it prints an appropriate message.

This approach is robust as it uses the `get` method, which won't raise an error if a key doesn't exist. It also includes checks to ensure the nested structure exists before attempting to access it.

Remember to keep the `verify=False` parameter in the `requests.request()` call if you're still having SSL verification issues, but do consider addressing this security concern in a production environment.