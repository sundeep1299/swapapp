Certainly. Here's a sample code for a PieChart.js component that you can create to use in your App.js:

javascript
import React from 'react';
import { Pie } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend);

const PieChart = ({ data }) => {
  const chartData = {
    labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
    datasets: [
      {
        label: '# of Votes',
        data: data,
        backgroundColor: [
          'rgba(255, 99, 132, 0.2)',
          'rgba(54, 162, 235, 0.2)',
          'rgba(255, 206, 86, 0.2)',
          'rgba(75, 192, 192, 0.2)',
          'rgba(153, 102, 255, 0.2)',
          'rgba(255, 159, 64, 0.2)',
        ],
        borderColor: [
          'rgba(255, 99, 132, 1)',
          'rgba(54, 162, 235, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(153, 102, 255, 1)',
          'rgba(255, 159, 64, 1)',
        ],
        borderWidth: 1,
      },
    ],
  };

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Project Distribution',
      },
    },
  };

  return <Pie data={chartData} options={options} />;
};

export default PieChart;


To use this component in your App.js:

1. Save the above code as PieChart.js in your components folder.

2. Import and use the PieChart component in your App.js:

javascript
import PieChart from './components/PieChart';

// In your App function, add state for chart data:
const [chartData, setChartData] = useState([12, 19, 3, 5, 2, 3]);

// In your JSX return statement, add:
<PieChart data={chartData} />


3. You might want to update the chartData based on your project data. For example, in your fetchProjects function, you could process the data to update the chart:

javascript
const fetchProjects = useCallback(async () => {
  setLoading(true);
  setError(null);
  try {
    const response = await axios.get('http://127.0.0.1:5000/projects-list');
    setProjects(response.data.projects);
    
    // Process data for chart
    const projectCounts = processProjectsForChart(response.data.projects);
    setChartData(projectCounts);

  } catch (error) {
    setError('Error fetching projects');
  } finally {
    setLoading(false);
  }
}, []);

// Add this function to process your project data
const processProjectsForChart = (projects) => {
  // This is just an example. Adjust according to your actual data structure
  const counts = projects.reduce((acc, project) => {
    acc[project.status] = (acc[project.status] || 0) + 1;
    return acc;
  }, {});
  
  return Object.values(counts);
};


This setup allows you to have a reusable PieChart component that you can easily update with new data as your application state changes. Remember to adjust the labels in the PieChart component to match your actual data categories.

Would you like me to explain any part of this code or provide more information on how to integrate it with your existing application?
