// First, in a terminal, install the Scala kernel for Jupyter:
// pip install spylon-kernel
// python -m spylon_kernel install

// In your first Jupyter notebook cell, initialize the dependencies:
%%init_spark
dependencies = [
    "org.postgresql:postgresql:42.2.24",
    "com.google.cloud.sql:postgres-socket-factory:1.11.0",
    "com.google.auth:google-auth-library-oauth2-http:1.11.0"
]

// In the next cell, import required libraries:
import com.google.auth.oauth2.GoogleCredentials
import java.sql.{Connection, DriverManager}
import scala.util.{Try, Success, Failure}

// Define the access token function in another cell:
def getDefaultAccessToken(): Option[String] = {
    println("Start: generating access token")
    Try {
        val credentials = GoogleCredentials.getApplicationDefault()
        credentials.refreshIfExpired()
        credentials.getAccessToken.getTokenValue
    } match {
        case Success(token) =>
            println("End: generating access token")
            Some(token)
        case Failure(e) =>
            println(s"Error: generating access token: ${e.getMessage}")
            None
    }
}

// Define the database connection function:
def getDbConnection(connectionStr: String, user: String, password: String): Option[Connection] = {
    println(s"Start: getting db connection for $user")
    
    val jdbcUrl = s"jdbc:postgresql://$connectionStr/psc_test"
    val props = new java.util.Properties()
    props.setProperty("user", user)
    props.setProperty("password", password)
    props.setProperty("socketFactory", "com.google.cloud.sql.postgres.SocketFactory")
    props.setProperty("cloudSqlInstance", "prj-d-netsec:us-central1:cloudsql-with-psc")

    def tryConnect(attempts: Int): Option[Connection] = {
        if (attempts <= 0) None
        else Try {
            Class.forName("org.postgresql.Driver")
            DriverManager.getConnection(jdbcUrl, props)
        } match {
            case Success(conn) =>
                println(s"End: getting db connection for $user")
                Some(conn)
            case Failure(e) =>
                println(s"Error: getting db connection for $user: ${e.getMessage}")
                Thread.sleep(5000)
                tryConnect(attempts - 1)
        }
    }

    tryConnect(5)
}

// In a new cell, use the connection:
val user = "svc-prj-d-lumi-poc-prj-d-lumi-poc.iam"
val password = getDefaultAccessToken().getOrElse {
    println("Failed to get access token")
    System.exit(1)
    ""
}
val connectionStr = "prj-d-netsec:us-central1:cloudsql-with-psc"

// Try to connect and execute a query:
getDbConnection(connectionStr, user, password).foreach { conn =>
    try {
        // Example query
        val stmt = conn.createStatement()
        val rs = stmt.executeQuery("SELECT * FROM your_table LIMIT 5")
        
        // Process results
        while (rs.next()) {
            // Access columns by name or index
            println(rs.getString(1))
        }
        
        rs.close()
        stmt.close()
    } finally {
        conn.close()
    }
}