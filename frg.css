This error means the API response structure isn't what we expected. Let's debug the response first. Modify the handleSendMessage function to log the response:

```javascript
const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    // Create user message
    const userMessage = {
        text: inputMessage.trim(),
        sender: 'user',
        timestamp: new Date().toISOString()
    };

    // Add user message to chat
    const newMessages = [...messages, userMessage];
    setMessages(newMessages);
    setInputMessage('');

    try {
        const myHeaders = new Headers();
        myHeaders.append("Content-Type", "application/json");

        const raw = JSON.stringify({
            "query": inputMessage
        });

        const requestOptions = {
            method: 'POST',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
        };

        // Make API call
        const response = await fetch("http://localhost:5000/query", requestOptions);
        const result = await response.json();
        
        // Debug log
        console.log('API Response:', result);

        // Add null check and structure verification
        if (result && Array.isArray(result.similar_docs) && result.similar_docs[0] && result.similar_docs[0].text) {
            const botMessage = {
                text: result.similar_docs[0].text,
                sender: 'bot',
                timestamp: new Date().toISOString()
            };
            setMessages([...newMessages, botMessage]);
        } else {
            console.log('Invalid response structure:', result);
            const errorMessage = {
                text: "I couldn't process the response correctly.",
                sender: 'bot',
                timestamp: new Date().toISOString()
            };
            setMessages([...newMessages, errorMessage]);
        }

    } catch (error) {
        console.error('Error:', error);
        const errorMessage = {
            text: "Sorry, I'm having trouble responding right now.",
            sender: 'bot',
            timestamp: new Date().toISOString()
        };
        setMessages([...newMessages, errorMessage]);
    }
};
```

Can you try this version and tell me what you see in the browser's console log when you send a message? That will help us understand the exact structure of the API response and fix the code accordingly.

Look for the "API Response:" log in your browser's console (F12 to open developer tools) and share what you see so I can help you adjust the code to match your API's response structure.