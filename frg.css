import requests
import json
import time
from openpyxl import Workbook, load_workbook
from datetime import datetime
import os

# ... (keep your existing functions: get_auth_token, create_workbench_instance, check_instance_status)

def log_to_excel(resource_name, status):
    filename = "workbench_instances_log.xlsx"
    
    if os.path.exists(filename):
        wb = load_workbook(filename)
        ws = wb.active
    else:
        wb = Workbook()
        ws = wb.active
        ws.append(["Timestamp", "Resource Name", "Status"])

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ws.append([timestamp, resource_name, status])
    
    wb.save(filename)
    print(f"Logged resource name {resource_name} with status {status} to {filename}")

def main():
    # Step 1: Get Auth Token
    auth_token = get_auth_token()
    print("Auth Token obtained successfully.")

    # Step 2: Create Workbench Instance
    create_response = create_workbench_instance(auth_token)
    resource_name = create_response.get('resourceName')
    if not resource_name:
        print("Failed to create workbench instance. Response:", create_response)
        return

    print(f"Workbench instance creation initiated. Resource Name: {resource_name}")

    # Step 3: Check Instance Status (poll every 30 seconds for 10 minutes)
    for _ in range(20):
        status_response = check_instance_status(auth_token, resource_name)
        status = status_response.get('status', 'UNKNOWN')
        print(f"Current status: {status}")
        
        # Log the current status to Excel
        log_to_excel(resource_name, status)
        
        if status == 'ACTIVE':
            print("Workbench instance is now active!")
            break
        elif status != 'PENDING':
            print(f"Unexpected status: {status}. Stopping the check.")
            break
        
        time.sleep(30)
    else:
        print("Timeout: Workbench instance did not become active within the expected time.")
        log_to_excel(resource_name, "TIMEOUT")

if __name__ == "__main__":
    main()