// UpdateForm.js
import React, { useState } from 'react';
import { DatePicker, ButtonPrimary, Label, Select, SelectOption, Input } from '@americanexpress/dls-react';
import './UpdateForm.css';
import Search from './Search';
import { searchProject } from './api';

const UpdateForm = () => {
  const [formData, setFormData] = useState({
    projectName: '',
    priority: '',
    jiraRaisedDate: '',
    jiraLink: '',
    poc: '',
    projectTimelineHandover: '',
    arbApprovalDate: null,
    projectBuildStartDate: null,
    firewallAclReqRaisedDate: null,
    firewallAclReqCompleteDate: null,
    projectBuildCompleteDate: null,
    projectValidationDate: null,
    projectHandoverDate: null,
    projectFinalHandover: null,
    comments: ''
  });

  const [searchTerm, setSearchTerm] = useState('');

  const handleSearch = async (term) => {
    try {
      const projectData = await searchProject(term);
      if (projectData) {
        setFormData(projectData);
      } else {
        console.log('Project not found');
        // You might want to show an error message to the user here
      }
    } catch (error) {
      console.error('Error searching for project:', error);
      // Handle the error appropriately
    }
  };

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
  };

  const handleDateChange = (name) => (date) => {
    setFormData(prevState => ({
      ...prevState,
      [name]: date
    }));
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    console.log('Form submitted:', formData);
    // Handle form submission logic here
  };

  return (
    <form onSubmit={handleSubmit} className="update-form">
      <Search onSearch={handleSearch} />
      
      <div className="update-form-row">
        <div className="update-form-column uce-column">
          <h3>UCE Team</h3>
          <div>
            <Label htmlFor="projectName">Project Name:</Label>
            <Input
              id="projectName"
              name="projectName"
              value={formData.projectName}
              onChange={handleInputChange}
              required
            />
          </div>
          <div>
            <Label htmlFor="priority">Priority:</Label>
            <Select
              id="priority"
              name="priority"
              value={formData.priority}
              onChange={handleInputChange}
              required
            >
              <SelectOption value="">Select Priority</SelectOption>
              <SelectOption value="High">High</SelectOption>
              <SelectOption value="Medium">Medium</SelectOption>
              <SelectOption value="Normal">Normal</SelectOption>
            </Select>
          </div>
          <div>
            <Label htmlFor="jiraLink">Jira Link:</Label>
            <Input
              id="jiraLink"
              name="jiraLink"
              type="url"
              value={formData.jiraLink}
              onChange={handleInputChange}
              required
            />
          </div>
          <div>
            <Label htmlFor="jiraRaisedDate">Jira Date:</Label>
            <DatePicker
              id="jiraRaisedDate"
              date={formData.jiraRaisedDate}
              onDateChange={handleDateChange('jiraRaisedDate')}
              placeholder="MM/DD/YYYY"
            />
          </div>
          <div>
            <Label htmlFor="arbApprovalDate">ARB Approval Date:</Label>
            <DatePicker
              id="arbApprovalDate"
              date={formData.arbApprovalDate}
              onDateChange={handleDateChange('arbApprovalDate')}
              placeholder="MM/DD/YYYY"
            />
          </div>
        </div>
        
        <div className="update-form-column platform-column">
          <h3>Platform Engineering Team</h3>
          <div>
            <Label htmlFor="projectBuildStartDate">Project Build Start Date:</Label>
            <DatePicker
              id="projectBuildStartDate"
              date={formData.projectBuildStartDate}
              onDateChange={handleDateChange('projectBuildStartDate')}
              placeholder="MM/DD/YYYY"
            />
          </div>
          <div>
            <Label htmlFor="poc">Assigned POC:</Label>
            <Select
              id="poc"
              name="poc"
              value={formData.poc}
              onChange={handleInputChange}
              required
            >
              <SelectOption value="">Select POC</SelectOption>
              <SelectOption value="John">John</SelectOption>
              <SelectOption value="Jane">Jane</SelectOption>
              <SelectOption value="Bob">Bob</SelectOption>
            </Select>
          </div>
          <div>
            <Label htmlFor="projectBuildCompleteDate">Project Build Complete Date:</Label>
            <DatePicker
              id="projectBuildCompleteDate"
              date={formData.projectBuildCompleteDate}
              onDateChange={handleDateChange('projectBuildCompleteDate')}
              placeholder="MM/DD/YYYY"
            />
          </div>
          <div>
            <Label htmlFor="projectValidationDate">Project Validation Date:</Label>
            <DatePicker
              id="projectValidationDate"
              date={formData.projectValidationDate}
              onDateChange={handleDateChange('projectValidationDate')}
              placeholder="MM/DD/YYYY"
            />
          </div>
          <div>
            <Label htmlFor="projectHandoverDate">Project Handover Date:</Label>
            <DatePicker
              id="projectHandoverDate"
              date={formData.projectHandoverDate}
              onDateChange={handleDateChange('projectHandoverDate')}
              placeholder="MM/DD/YYYY"
            />
          </div>
        </div>
        
        <div className="update-form-column uce-column">
          <h3>UCE Team</h3>
          <div>
            <Label htmlFor="firewallAclReqRaisedDate">Firewall ACL Req Raised Date:</Label>
            <DatePicker
              id="firewallAclReqRaisedDate"
              date={formData.firewallAclReqRaisedDate}
              onDateChange={handleDateChange('firewallAclReqRaisedDate')}
              placeholder="MM/DD/YYYY"
            />
          </div>
          <div>
            <Label htmlFor="firewallAclReqCompleteDate">Firewall ACL Req Complete Date:</Label>
            <DatePicker
              id="firewallAclReqCompleteDate"
              date={formData.firewallAclReqCompleteDate}
              onDateChange={handleDateChange('firewallAclReqCompleteDate')}
              placeholder="MM/DD/YYYY"
            />
          </div>
          <div>
            <Label htmlFor="projectFinalHandover">Project Final Handover Date:</Label>
            <DatePicker
              id="projectFinalHandover"
              date={formData.projectFinalHandover}
              onDateChange={handleDateChange('projectFinalHandover')}
              placeholder="MM/DD/YYYY"
            />
          </div>
        </div>
      </div>

      <div className="comments-section">
        <Label htmlFor="comments">Project Comments:</Label>
        <textarea
          id="comments"
          name="comments"
          value={formData.comments}
          onChange={handleInputChange}
        />
      </div>

      <div className="submit-section">
        <ButtonPrimary type="submit">Submit</ButtonPrimary>
      </div>
    </form>
  );
};

export default UpdateForm;

// Search.js
import React, { useState } from 'react';
import { Input, ButtonPrimary } from '@americanexpress/dls-react';

const Search = ({ onSearch }) => {
  const [searchTerm, setSearchTerm] = useState('');

  const handleSubmit = (event) => {
    event.preventDefault();
    onSearch(searchTerm);
  };

  return (
    <form onSubmit={handleSubmit} className="search-form">
      <Input
        type="text"
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        placeholder="Enter project name"
      />
      <ButtonPrimary type="submit">Search</ButtonPrimary>
    </form>
  );
};

export default Search;

// api.js
export const searchProject = async (projectName) => {
  try {
    const response = await fetch(`/api/projects?name=${encodeURIComponent(projectName)}`);
    if (!response.ok) {
      throw new Error('Project not found');
    }
    return await response.json();
  } catch (error) {
    console.error('Error searching for project:', error);
    throw error;
  }
};

// UpdateForm.css
.update-form {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.update-form-row {
  display: flex;
  justify-content: space-between;
  gap: 20px;
}

.update-form-column {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.search-form {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}

.comments-section {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.submit-section {
  display: flex;
  justify-content: flex-end;
}
