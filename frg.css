// ChatBot.jsx
import React, { useState } from 'react';
import { MessageCircle, X, Send } from 'lucide-react';
import ChatWindow from './ChatWindow';
import ChatButton from './ChatButton';
import './ChatBot.css';

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');

  const handleSendMessage = () => {
    if (!inputMessage.trim()) return;

    const newMessages = [...messages, { text: inputMessage, sender: 'user' }];
    
    if (inputMessage.toLowerCase().includes('hi')) {
      newMessages.push({
        text: 'Hello welcome to lumi gpt, how can I help you',
        sender: 'bot'
      });
    }

    setMessages(newMessages);
    setInputMessage('');
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSendMessage();
    }
  };

  return (
    <div className="chatbot-container">
      {!isOpen && <ChatButton onClick={() => setIsOpen(true)} />}
      {isOpen && (
        <ChatWindow
          messages={messages}
          inputMessage={inputMessage}
          setInputMessage={setInputMessage}
          handleSendMessage={handleSendMessage}
          handleKeyPress={handleKeyPress}
          onClose={() => setIsOpen(false)}
        />
      )}
    </div>
  );
};

export default ChatBot;

// ChatButton.jsx
import React from 'react';
import { MessageCircle } from 'lucide-react';

const ChatButton = ({ onClick }) => {
  return (
    <button
      onClick={onClick}
      className="chat-button"
    >
      <MessageCircle size={24} />
    </button>
  );
};

export default ChatButton;

// ChatWindow.jsx
import React from 'react';
import { X, Send } from 'lucide-react';
import MessageList from './MessageList';

const ChatWindow = ({
  messages,
  inputMessage,
  setInputMessage,
  handleSendMessage,
  handleKeyPress,
  onClose
}) => {
  return (
    <div className="chat-window">
      <div className="chat-header">
        <h3>Chat Support</h3>
        <button onClick={onClose} className="close-button">
          <X size={20} />
        </button>
      </div>

      <MessageList messages={messages} />

      <div className="chat-input-container">
        <input
          type="text"
          value={inputMessage}
          onChange={(e) => setInputMessage(e.target.value)}
          onKeyPress={handleKeyPress}
          placeholder="Type a message..."
          className="chat-input"
        />
        <button
          onClick={handleSendMessage}
          className="send-button"
        >
          <Send size={20} />
        </button>
      </div>
    </div>
  );
};

export default ChatWindow;

// MessageList.jsx
import React from 'react';
import Message from './Message';

const MessageList = ({ messages }) => {
  return (
    <div className="message-list">
      {messages.map((message, index) => (
        <Message key={index} message={message} />
      ))}
    </div>
  );
};

export default MessageList;

// Message.jsx
import React from 'react';

const Message = ({ message }) => {
  return (
    <div className={`message-container ${message.sender}`}>
      <div className={`message ${message.sender}`}>
        {message.text}
      </div>
    </div>
  );
};

export default Message;

// ChatBot.css
.chatbot-container {
  position: fixed;
  bottom: 1rem;
  right: 1rem;
  z-index: 50;
}

.chat-button {
  background-color: #3b82f6;
  color: white;
  padding: 1rem;
  border-radius: 9999px;
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  transition: all 0.2s;
}

.chat-button:hover {
  background-color: #2563eb;
}

.chat-window {
  background-color: white;
  border-radius: 0.5rem;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
  width: 20rem;
  height: 24rem;
  display: flex;
  flex-direction: column;
}

.chat-header {
  background-color: #3b82f6;
  color: white;
  padding: 1rem;
  border-top-left-radius: 0.5rem;
  border-top-right-radius: 0.5rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.chat-header h3 {
  font-weight: 600;
  margin: 0;
}

.close-button {
  color: white;
  transition: color 0.2s;
}

.close-button:hover {
  color: #e5e7eb;
}

.message-list {
  flex: 1;
  overflow-y: auto;
  padding: 1rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.message-container {
  display: flex;
}

.message-container.user {
  justify-content: flex-end;
}

.message-container.bot {
  justify-content: flex-start;
}

.message {
  max-width: 80%;
  padding: 0.75rem;
  border-radius: 0.5rem;
}

.message.user {
  background-color: #3b82f6;