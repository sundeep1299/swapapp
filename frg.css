```python
import requests
import json
import openpyxl
from datetime import datetime
import os
import warnings
from requests.packages.urllib3.exceptions import InsecureRequestWarning

warnings.simplefilter('ignore', InsecureRequestWarning)

def get_auth_token():
    url = "https://aexp.oktapreview.com/oauth2/aus1kh0oh8jY8jwqJ0h8/v1/token"
    payload = 'username=svc.aj.aida-lumi-api&password=A!daLum1&scope=openid&grant_type=password'
    headers = {
        'Authorization': 'Basic MG9hMWtoMGw2eHdBWHQ2cWswaDg=',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Cookie': 'JSESSIONID=629322A413F1640648ECAE4A6990A0EB; JSESSIONID=6D6EDD58E277FC49B9E8F56990EF858D'
    }
    response = requests.request("POST", url, headers=headers, data=payload, verify=False)
    return json.loads(response.text)['access_token']

def read_prc_groups(filename="prc_groups_log.xlsx"):
    """Read PRC groups from Excel file"""
    try:
        wb = openpyxl.load_workbook(filename)
        ws = wb.active
        
        # Find the PRC Groups column
        headers = [cell.value for cell in ws[1]]
        if 'PRC Groups' not in headers:
            raise ValueError("'PRC Groups' column not found in Excel file")
        
        prc_col = headers.index('PRC Groups') + 1
        
        # Read PRC groups (skip header)
        prc_groups = []
        for row in range(2, ws.max_row + 1):
            prc_group = ws.cell(row=row, column=prc_col).value
            if prc_group and prc_group != 'No PRC groups found':
                prc_groups.append({
                    'row': row,
                    'group': prc_group.strip()
                })
        
        return prc_groups, wb, ws
    except Exception as e:
        print(f"Error reading Excel file: {str(e)}")
        return None, None, None

def get_group_members(auth_token, prc_group):
    """Get members for a PRC group"""
    url = f"https://lumigcpauto.aexp.com/gcp/admin/groups/{prc_group}/members"
    
    headers = {
        'Authorization': f'Bearer {auth_token}',
        'Accept': '*/*'
    }
    
    try:
        response = requests.request("GET", url, headers=headers, verify=False)
        return response.json()
    except Exception as e:
        print(f"Error getting members for group {prc_group}: {str(e)}")
        return None

def extract_member_emails(members_data):
    """Extract email IDs from members response"""
    emails = []
    if members_data and 'members' in members_data:
        for member in members_data['members']:
            if 'email' in member and member.get('status') == 'ACTIVE':
                emails.append(member['email'])
    return '; '.join(emails) if emails else 'No active members found'

def update_excel_with_members(wb, ws, prc_data, members):
    """Update Excel with member information"""
    # Add Members column if it doesn't exist
    headers = [cell.value for cell in ws[1]]
    if 'Members' not in headers:
        next_col = ws.max_column + 1
        ws.cell(row=1, column=next_col, value='Members')
        members_col = next_col
    else:
        members_col = headers.index('Members') + 1
    
    # Update member information
    ws.cell(row=prc_data['row'], column=members_col, value=members)
    
    return wb, ws

def main():
    print("Starting PRC group member fetch process...")
    
    # Read PRC groups from Excel
    prc_groups, wb, ws = read_prc_groups()
    if not prc_groups:
        print("No PRC groups found to process")
        return
    
    # Get authentication token
    auth_token = get_auth_token()
    print("Auth Token obtained successfully.")
    
    # Process each PRC group
    for prc_data in prc_groups:
        print(f"\nProcessing PRC group: {prc_data['group']}")
        
        try:
            # Get members
            members_data = get_group_members(auth_token, prc_data['group'])
            if members_data:
                member_emails = extract_member_emails(members_data)
                print(f"Found members: {member_emails}")
                
                # Update Excel
                wb, ws = update_excel_with_members(wb, ws, prc_data, member_emails)
            else:
                print("Failed to get members data")
                wb, ws = update_excel_with_members(wb, ws, prc_data, "Error fetching members")
        except Exception as e:
            print(f"Error processing group: {str(e)}")
            wb, ws = update_excel_with_members(wb, ws, prc_data, f"Error: {str(e)}")
    
    # Save the updated Excel file
    try:
        wb.save("prc_groups_log.xlsx")
        print("\nSuccessfully updated Excel file with member information")
    except Exception as e:
        print(f"Error saving Excel file: {str(e)}")

if __name__ == "__main__":
    main()
```