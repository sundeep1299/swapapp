import requests
import json
import time
import openpyxl
from datetime import datetime
import os
import warnings
from requests.packages.urllib3.exceptions import InsecureRequestWarning

warnings.simplefilter('ignore', InsecureRequestWarning)

def read_from_excel(filename="wicreate.xlsx"):
    wb = openpyxl.load_workbook(filename)
    sheet = wb.active
    headers = [cell.value for cell in sheet[1]]
    data = {}
    for row in sheet.iter_rows(min_row=2, values_only=True):
        if row[0]:  # Ensure the first cell (resource_id) is not empty
            data[row[0]] = dict(zip(headers, row))
    return data

def get_auth_token():
    url = "https://aexp.oktapreview.com/oauth2/aus1kh0oh8jY8jwqJ0h8/v1/token"
    payload = 'username=svc.aj.aida-lumi-api&password=A!daLum1&scope=openid&grant_type=password'
    headers = {
        'Authorization': 'Basic MG9hMWtoMGw2eHdBWHQ2cWswaDg=',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Cookie': 'JSESSIONID=629322A413F1640648ECAE4A6990A0EB; JSESSIONID=6D6EDD58E277FC49B9E8F56990EF858D'
    }
    response = requests.request("POST", url, headers=headers, data=payload, verify=False)
    return json.loads(response.text)['access_token']

def create_workbench_instance(auth_token, excel_data):
    url = "https://lumigcpauto-qa.aexp.com/un/v2/terraform/automate/workbench_instance"
    
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    instance_name = f"wi-{excel_data['req_ads_id']}-{timestamp}"
    
    payload = {
        "project_id": excel_data['project_id'],
        "instance_name": instance_name,
        "env": "e2",
        "machine_type": "n2d-standard-4",
        "version": "0.0.8",
        "region": "us-central1",
        "source": "private/aexp/lumi-workbench-instance/google",
        "initialize_params": {
            "disk_size_gb": "150",
            "disk_type": "pd-ssd"
        },
        "vm_image": {
            "family": "workbench-instances",
            "project": "cloud-notebooks-managed"
        },
        "adsId": excel_data['req_ads_id'],
        "runtime_owner": excel_data['req_email_ad_tx'],
        "idle_shutdown_timeout": "120",
        "labels": {
            "team": "lumi",
            "ads-id": excel_data['req_ads_id']
        },
        "metadata": {
            "disable-mixer": "True"
        }
    }
    
    headers = {
        'Authorization': f'Bearer {auth_token}',
        'Content-Type': 'application/json'
    }
    
    response = requests.request("POST", url, headers=headers, json=payload, verify=False)
    return json.loads(response.text)

def check_instance_status(auth_token, resource_name):
    url = f"https://lumigcpauto-qa.aexp.com/un/gcp/status/{resource_name}"
    headers = {
        'Authorization': f'Bearer {auth_token}',
        'Content-Type': 'application/json'
    }
    response = requests.request("GET", url, headers=headers, verify=False)
    return json.loads(response.text)

def log_to_excel(resource_name, status, workbench_url):
    filename = "workbench_instances_log.xlsx"
    
    if os.path.exists(filename):
        wb = openpyxl.load_workbook(filename)
        ws = wb.active
    else:
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(["Timestamp", "Resource Name", "Status", "Workbench URL"])

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ws.append([timestamp, resource_name, status, workbench_url])
    
    wb.save(filename)
    print(f"Logged resource name {resource_name} with status {status} to {filename}")

def main():
    excel_data = read_from_excel()
    
    for resource_id, data in excel_data.items():
        print(f"Processing resource: {resource_id}")
        
        # Step 1: Get Auth Token
        auth_token = get_auth_token()
        print("Auth Token obtained successfully.")

        # Step 2: Create Workbench Instance
        create_response = create_workbench_instance(auth_token, data)
        resource_name = create_response.get('resourceName')
        if not resource_name:
            print("Failed to create workbench instance. Response:", create_response)
            continue

        print(f"Workbench instance creation initiated. Resource Name: {resource_name}")

        # Step 3: Check Instance Status (poll every 30 seconds for 10 minutes)
        for _ in range(20):
            status_response = check_instance_status(auth_token, resource_name)
            status = status_response.get('status', 'UNKNOWN')
            print(f"Current status: {status}")
            
            workbench_url = status_response.get('gcp', {}).get('proxyUri', 'N/A')
            
            # Log the current status to Excel
            log_to_excel(resource_name, status, workbench_url)
            
            if status == 'ACTIVE':
                print("Workbench instance is now active!")
                print(f"Workbench URL: {workbench_url}")
                break
            elif status != 'PENDING':
                print(f"Unexpected status: {status}. Stopping the check.")
                break
            
            time.sleep(30)
        else:
            print("Timeout: Workbench instance did not become active within the expected time.")
            log_to_excel(resource_name, "TIMEOUT", "N/A")

if __name__ == "__main__":
    main()