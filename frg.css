import requests
import json
import time
import openpyxl
from datetime import datetime
import os
import warnings
from requests.packages.urllib3.exceptions import InsecureRequestWarning

warnings.simplefilter('ignore', InsecureRequestWarning)

# ... (keep other functions like get_auth_token, create_workbench_instance, check_instance_status)

def log_to_excel(row_data, resource_name, status):
    filename = "workbench_instances_log.xlsx"
    
    if os.path.exists(filename):
        wb = openpyxl.load_workbook(filename)
        ws = wb.active
    else:
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(["Timestamp", "Resource ID", "Resource Name", "Status", "req_ads_id", "req_email_ad_tx", "project_id"])

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ws.append([
        timestamp,
        row_data['resource_id'],
        resource_name,
        status,
        row_data['req_ads_id'],
        row_data['req_email_ad_tx'],
        row_data['project_id']
    ])
    
    wb.save(filename)
    print(f"Logged resource ID {row_data['resource_id']}, name {resource_name} with status {status} to {filename}")

def main():
    excel_data = read_from_excel()
    
    for row_data in excel_data:
        print(f"Processing resource ID: {row_data['resource_id']}")
        
        # Step 1: Get Auth Token
        auth_token = get_auth_token()
        print("Auth Token obtained successfully.")

        # Step 2: Create Workbench Instance
        create_response = create_workbench_instance(auth_token, row_data)
        resource_name = create_response.get('resourceName')
        if not resource_name:
            print("Failed to create workbench instance. Response:", create_response)
            log_to_excel(row_data, "N/A", "CREATION_FAILED")
            continue

        print(f"Workbench instance creation initiated. Resource Name: {resource_name}")

        # Step 3: Check Instance Status (poll every 30 seconds for 10 minutes)
        for _ in range(20):
            status_response = check_instance_status(auth_token, resource_name)
            status = status_response.get('status', 'UNKNOWN')
            print(f"Current status: {status}")
            
            # Log the current status to Excel
            log_to_excel(row_data, resource_name, status)
            
            if status == 'ACTIVE':
                print("Workbench instance is now active!")
                break
            elif status != 'PENDING':
                print(f"Unexpected status: {status}. Stopping the check.")
                break
            
            time.sleep(30)
        else:
            print("Timeout: Workbench instance did not become active within the expected time.")
            log_to_excel(row_data, resource_name, "TIMEOUT")

        print(f"Completed processing for resource ID: {row_data['resource_id']}\n")

if __name__ == "__main__":
    main()