@PostMapping("/admin/tfe/appoint-leader/{job-name}")
public Mono<String> updateLockAdsId(@RequestHeader @ApiParam(hidden = true) String requestHeader,
                                    @PathVariable("job-name") String jobName) throws InvalidParamException, ApiException {
    return Mono.fromCallable(() -> {
        // Validate input
        if (jobName == null || jobName.isEmpty()) {
            throw new InvalidParamException("Invalid job name");
        }

        // Get the hostname of the pod
        String hostname = System.getenv("HOSTNAME");
        if (hostname == null || hostname.isEmpty()) {
            throw new ApiException("Unable to retrieve pod hostname");
        }

        // Perform database operation
        return jobConfigRepository.findByJobNmAndModlNm(jobName, "tfe-automation")
            .flatMap(jobConfig -> {
                jobConfig.setLockAdsUserId(hostname);
                return jobConfigRepository.save(jobConfig);
            })
            .switchIfEmpty(Mono.defer(() -> {
                JobConfig newJobConfig = new JobConfig();
                newJobConfig.setJobNm(jobName);
                newJobConfig.setModlNm("tfe-automation");
                newJobConfig.setLockAdsUserId(hostname);
                return jobConfigRepository.save(newJobConfig);
            }))
            .thenReturn("Successfully upserted the hostname of pod");
    })
    .onErrorResume(InvalidParamException.class, e -> Mono.error(new ResponseStatusException(HttpStatus.BAD_REQUEST, e.getMessage())))
    .onErrorResume(ApiException.class, e -> Mono.error(new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage())))
    .onErrorResume(Exception.class, e -> Mono.error(new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Fatal internal server error")));
}