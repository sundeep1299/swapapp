import requests
import json
from typing import Dict, Any, Optional
import os
from datetime import datetime
import base64
import hmac
import hashlib
from dotenv import load_dotenv
import urllib3

# Disable SSL verification warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class GenAIClient:
    def __init__(self, config: Dict[str, str]):
        """Initialize the client with configuration"""
        self.host = config['host']
        self.app_id = config['app_id']
        self.secret = config['secret']
        self.version = config['version']

    def generate_signature(self, message: str, secret: str) -> str:
        """
        Generate HMAC signature following Postman's pre-request script logic
        """
        # Create HMAC SHA256 hash
        hash_obj = hmac.new(
            secret.encode('utf-8'),
            message.encode('utf-8'),
            hashlib.sha256
        )
        
        # Get base64 of hash
        hash_base64 = base64.b64encode(hash_obj.digest()).decode('utf-8')
        
        # Replace special characters as done in Postman script
        hash_base64 = hash_base64.replace('+', '-').replace('/', '_').replace('=', '')
        
        return hash_base64

    def get_mac_id(self, secret: str, version: str, app_id: str) -> str:
        """Generate MAC ID following Postman's logic"""
        timestamp = str(int(datetime.now().timestamp()))
        message = f"{app_id}-{version}-{timestamp}"
        return self.generate_signature(message, secret)
        
    def get_idaas_jwt(self) -> Optional[str]:
        """
        Get IDAAS JWT token for authentication
        Returns: JWT token string or None if failed
        """
        url = f"{self.host}/security/digital/v1/application"
        
        # Generate timestamp
        timestamp = str(int(datetime.now().timestamp()))
        
        # Generate HMAC signature
        mac = self.get_mac_id(self.secret, self.version, self.app_id)
        
        payload = {
            "scope": [
                "/genai/google/v1/models/gemini-1.5-pro-002/**:post"
            ]
        }
        
        headers = {
            'Content-Type': 'application/json',
            'X-Auth-AppID': self.app_id,
            'X-Auth-Signature': mac,  # Using the generated MAC
            'X-Auth-Version': self.version,
            'X-Auth-Timestamp': timestamp,
            'Accept': 'application/json'
        }
        
        try:
            print("\nGetting JWT token...")
            print(f"Making request to: {url}")
            print("Headers:", json.dumps(headers, indent=2))
            
            response = requests.post(url, headers=headers, json=payload, verify=False)
            print(f"Response Status Code: {response.status_code}")
            
            if response.status_code == 200:
                token_response = response.json()
                if 'authorization_token' in token_response:
                    print("Successfully obtained JWT token")
                    return token_response['authorization_token']
                print("Error: No authorization_token in response")
                print("Response:", json.dumps(token_response, indent=2))
            else:
                print(f"Error response: {response.text}")
            
            return None
            
        except requests.exceptions.RequestException as e:
            print(f"Error getting JWT token: {e}")
            return None

    def call_genai_llm(self, auth_token: str, prompt: str) -> Optional[Dict]:
        """
        Call the Gemini LLM API with the provided authentication token and prompt
        """
        url = "https://eap-dev.aexp.com/genai/google/v1/models/gemini-1.5-pro-002/generateContent"
        
        payload = {
            "contents": [
                {
                    "parts": [
                        {
                            "text": prompt
                        }
                    ]
                },
                {
                    "role": "model"
                }
            ]
        }
        
        headers = {
            'Authorization': f'Bearer {auth_token}',
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache'
        }
        
        try:
            print("\nCalling Gemini API...")
            print(f"Making request to: {url}")
            response = requests.post(url, headers=headers, json=payload, verify=False)
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"Error: Status code {response.status_code}")
                print(f"Response: {response.text}")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"Error calling Gemini API: {e}")
            return None

    def process_user_query(self, prompt: str) -> Optional[Dict]:
        """Process a user query by getting JWT token and calling Gemini API"""
        auth_token = self.get_idaas_jwt()
        if not auth_token:
            print("Failed to get authentication token")
            return None
        
        return self.call_genai_llm(auth_token, prompt)

def get_user_input() -> Optional[str]:
    """Get and validate user input"""
    prompt = input("\nEnter your prompt for Gemini (or 'quit' to exit): ").strip()
    if prompt.lower() == 'quit':
        return None
    return prompt if prompt else None

def main():
    # Load environment variables
    load_dotenv()
    
    # Initialize configuration
    config = {
        'host': os.getenv('IDAAS_HOST'),
        'app_id': os.getenv('APP_ID'),
        'secret': os.getenv('SECRET'),
        'version': os.getenv('VERSION')
    }

    # Validate configuration
    if not all(config.values()):
        missing = [key for key, value in config.items() if not value]
        print(f"Error: Missing environment variables: {', '.join(missing)}")
        return

    client = GenAIClient(config)
    
    print("\nWelcome to the Gemini API Interface!")
    print("-----------------------------------")
    
    while True:
        prompt = get_user_input()
        if prompt is None:
            print("\nGoodbye!")
            break
        
        response = client.process_user_query(prompt)
        
        if response:
            print("\nGemini Response:")
            print("-----------------")
            print(json.dumps(response, indent=2))
        else:
            print("\nFailed to get response from Gemini")
        
        print("\n" + "="*50)

if __name__ == "__main__":
    main()