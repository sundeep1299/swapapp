from google.cloud.sql.connector import Connector
import sqlalchemy
import os
from datetime import datetime

def log_step(message):
    """Helper function to print timestamped log messages"""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
    print(f"[{timestamp}] {message}")

def init_psc_cloud_sql_connection():
    """
    Initialize connection to PSC-enabled Cloud SQL instance with detailed logging
    """
    try:
        log_step("Starting connection initialization...")
        
        # Connection details
        instance_connection_name = "prj-d-netsec:us-central1:cloudsql-with-psc"
        database_name = "psc_test"
        user = "svc-p-lumi-pscpoc-sa@prj-p-lumi-pscpoc.iam"
        
        log_step(f"Using instance: {instance_connection_name}")
        log_step(f"Database name: {database_name}")
        log_step(f"User: {user}")
        
        # Initialize connector
        log_step("Initializing Cloud SQL Connector...")
        connector = Connector()
        
        def getconn():
            log_step("Attempting to establish database connection...")
            try:
                conn = connector.connect(
                    instance_connection_name=instance_connection_name,
                    driver="pg8000",
                    db=database_name,
                    user=user,
                    enable_iam_auth=True
                )
                log_step("Database connection established successfully!")
                return conn
            except Exception as e:
                log_step(f"❌ Connection error in getconn(): {str(e)}")
                raise e

        log_step("Creating SQLAlchemy engine...")
        pool = sqlalchemy.create_engine(
            "postgresql+pg8000://",
            creator=getconn,
        )
        log_step("SQLAlchemy engine created successfully!")
        
        return pool
    
    except Exception as e:
        log_step(f"❌ Error in initialization: {str(e)}")
        raise e

def test_database_operations():
    """
    Test various database operations with detailed logging
    """
    try:
        log_step("=== Starting Database Connection Test ===")
        
        # Initialize connection
        engine = init_psc_cloud_sql_connection()
        log_step("Connection pool initialized")
        
        # Test basic connectivity
        log_step("Testing basic connectivity...")
        with engine.connect() as conn:
            # Test query 1: Simple SELECT
            log_step("Executing test query 1: SELECT 1")
            result = conn.execute(sqlalchemy.text("SELECT 1")).fetchone()
            log_step(f"Test query 1 result: {result}")
            
            # Test query 2: Get database version
            log_step("Executing test query 2: Get PostgreSQL version")
            version = conn.execute(sqlalchemy.text("SELECT version()")).fetchone()
            log_step(f"PostgreSQL Version: {version[0]}")
            
            # Test query 3: List tables
            log_step("Executing test query 3: List tables")
            tables = conn.execute(sqlalchemy.text(
                "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'"
            )).fetchall()
            log_step("Existing tables in database:")
            for table in tables:
                log_step(f"  - {table[0]}")
        
        log_step("✅ All database operations completed successfully!")
        return True
        
    except Exception as e:
        log_step(f"❌ Error during database operations: {str(e)}")
        return False
    finally:
        log_step("=== Database Connection Test Complete ===")

if __name__ == "__main__":
    print("\n" + "="*50)
    print("Cloud SQL Connection Test Starting")
    print("="*50 + "\n")
    
    test_database_operations()