 Certainly! I'll modify the code to load data only when the button is clicked and improve the table view with better CSS. Here's the updated code for your ProjectSelection component:

```jsx
import React, { useState } from 'react';
import { useAuthBlueSso } from 'use-authblue-sso';
import { ButtonPrimary, IconSetting } from '@americanexpress/dls-react';
import './ProjectSelection.css'; // We'll create this CSS file

const ProjectSelection = () => {
  const [resources, setResources] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const { user } = useAuthBlueSso();

  const fetchResources = async () => {
    setLoading(true);
    setError(null);
    try {
      const userId = user?.attributes?.adsid || 'vsing379';
      const response = await fetch(`https://lumiqcpauto-dev.aexp.com/terraform/automate/data_proc/${userId}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
        },
        credentials: 'include'
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      setResources(data);
    } catch (e) {
      console.error('Error fetching resources:', e);
      setError('Failed to fetch resources. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="project-selection">
      <h2>GCP Cluster Resources</h2>
      <ButtonPrimary 
        icon={<IconSetting title="setting" />} 
        onClick={fetchResources} 
        disabled={loading}
      >
        {loading ? 'Loading...' : 'My GCP Resources'}
      </ButtonPrimary>
      
      {error && <p className="error-message">{error}</p>}
      
      {resources.length > 0 && (
        <table className="resources-table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Type</th>
              <th>Created By</th>
            </tr>
          </thead>
          <tbody>
            {resources.map((resource, index) => (
              <tr key={index}>
                <td>{resource.name}</td>
                <td>{resource.type}</td>
                <td>{resource.createdBy}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default ProjectSelection;
```

Now, create a new file called `ProjectSelection.css` in the same directory and add the following CSS:

```css
.project-selection {
  padding: 20px;
  max-width: 800px;
  margin: 0 auto;
}

.project-selection h2 {
  margin-bottom: 20px;
  color: #333;
}

.error-message {
  color: red;
  margin-top: 10px;
}

.resources-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
  box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
}

.resources-table th,
.resources-table td {
  padding: 12px 15px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

.resources-table th {
  background-color: #f8f8f8;
  font-weight: bold;
  color: #333;
  text-transform: uppercase;
}

.resources-table tr:nth-child(even) {
  background-color: #f2f2f2;
}

.resources-table tr:hover {
  background-color: #e6f7ff;
}
```

These changes accomplish the following:

1. The data is now only loaded when the "My GCP Resources" button is clicked.
2. The table view has been improved with a cleaner structure and better CSS styling.
3. The component uses the ButtonPrimary and IconSetting from the @americanexpress/dls-react library for a more polished look.
4. Error messages are displayed more prominently.
5. The table is only rendered when there are resources to display.

This setup should provide a much better user experience and visual appeal. The resources will only load when the button is clicked, and the table will have a more professional appearance with alternating row colors, hover effects, and proper spacing.