 I'll help you create a complete code that combines both the token generation and database connection functionality from the second image:

```python
import google.auth.transport.requests
from google.cloud.sql.connector import Connector, IPTypes
import psycopg2
import pg8000
import time

# Project configuration
project_id = "prj-d-netsec"  # @param {type:"string"}
assert project_id, "⚠️ Please provide a Google Cloud project ID"
# !gcloud config set project {project_id}

def get_cf_default_access_token():
    print("Start: generating access token")
    try:
        creds, project = google.auth.default()
        auth_req = creds.refresh(google.auth.transport.requests.Request())
    except Exception as e:
        print("Error: generating access token")
        print(e)
        return None
    print("End: generating access token")
    return creds.token

def get_db_connection(connection_str, user, password):
    print(f'Start: getting db connection for {user}')
    conn = None
    
    for i in range(5):  # 5 retry attempts
        try:
            connector = Connector()
            conn = connector.connect(
                connection_str,
                "pg8000",
                ip_type="psc",  # Private Service Connect
                user=user,
                password=password,
                db="psc_test"
            )
            break
        except Exception as e:
            print(f'Error: getting db connection for {user}')
            print(e)
            time.sleep(5)  # Wait 5 seconds before retrying
            
    print(f'End: getting db connection for {user}')
    return conn

def main():
    # Get access token
    password = get_cf_default_access_token()
    if not password:
        print("Failed to get access token")
        return

    # Print token for verification
    print(get_cf_default_access_token())

    # Connection parameters
    connection_str = "prj-d-netsec:us-central1:cloudsql-with-psc"
    user = "svc-p-lumi-pscpoc-sa@prj-p-lumi-pscpoc.iam"

    # Get database connection
    connect = get_db_connection(connection_str, user, password)

    try:
        if connect:
            # Perform your database operations here
            with connect.cursor() as cursor:
                # Example query
                # cursor.execute("SELECT version();")
                # result = cursor.fetchone()
                # print(result)
                pass
    except Exception as e:
        print(f"Database operation error: {e}")
    finally:
        if connect:
            connect.close()
            print("Connection closed")

if __name__ == "__main__":
    main()
```

This code:

1. Imports all necessary libraries for Google Cloud authentication and PostgreSQL connection

2. Includes the `get_cf_default_access_token()` function that:
   - Generates a Google Cloud access token
   - Includes proper error handling
   - Returns the token for database authentication

3. Includes the `get_db_connection()` function that:
   - Uses the Google Cloud SQL Connector
   - Implements retry logic (5 attempts)
   - Uses Private Service Connect (PSC)
   - Includes comprehensive error handling
   - Returns the database connection

4. Includes a `main()` function that:
   - Gets the access token
   - Establishes the database connection
   - Has a place for your database operations
   - Properly closes the connection

To use this code:

1. Make sure you have installed the required packages:
```bash
pip install google-auth google-cloud-sql-connector psycopg2-binary pg8000
```

2. Ensure you have proper Google Cloud authentication set up:
   - Service account credentials configured
   - Appropriate IAM permissions
   - Google Cloud project selected

3. Replace these values if needed:
   - `project_id`
   - `connection_str`
   - `user`
   - Database name in the connector.connect() call

4. The code includes retry logic and proper error handling for both token generation and database connection.

Would you like me to explain any specific part of this code in more detail? Or would you like to see how to add any specific database operations?