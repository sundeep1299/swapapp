 I apologize for the pagination appearance. Let's improve the CSS for the pagination to make it look more polished and aligned with the design in your image. Here's an updated CSS for the pagination:

```css
.pagination {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  margin-bottom: 20px;
}

.pagination li {
  list-style-type: none;
  margin: 0 2px;
}

.pagination button {
  min-width: 32px;
  height: 32px;
  padding: 0 6px;
  font-size: 14px;
  line-height: 30px;
  text-align: center;
  background-color: #ffffff;
  border: 1px solid #d9d9d9;
  border-radius: 2px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.pagination button:hover {
  border-color: #1890ff;
  color: #1890ff;
}

.pagination .active button {
  background-color: #1890ff;
  border-color: #1890ff;
  color: #ffffff;
}

.pagination .active button:hover {
  background-color: #40a9ff;
  border-color: #40a9ff;
}

.pagination .disabled button {
  color: rgba(0, 0, 0, 0.25);
  border-color: #d9d9d9;
  cursor: not-allowed;
}
```

Also, let's update the Pagination component in your React code to include "Previous" and "Next" buttons, and limit the number of page buttons shown:

```jsx
const Pagination = ({ itemsPerPage, totalItems, paginate, currentPage }) => {
  const pageNumbers = [];
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  // Logic to show limited page numbers
  let startPage, endPage;
  if (totalPages <= 7) {
    startPage = 1;
    endPage = totalPages;
  } else {
    if (currentPage <= 4) {
      startPage = 1;
      endPage = 7;
    } else if (currentPage + 3 >= totalPages) {
      startPage = totalPages - 6;
      endPage = totalPages;
    } else {
      startPage = currentPage - 3;
      endPage = currentPage + 3;
    }
  }

  for (let i = startPage; i <= endPage; i++) {
    pageNumbers.push(i);
  }

  return (
    <nav>
      <ul className='pagination'>
        <li className={currentPage === 1 ? 'disabled' : ''}>
          <button onClick={() => paginate(currentPage - 1)} disabled={currentPage === 1}>
            Previous
          </button>
        </li>
        {startPage > 1 && <li><button onClick={() => paginate(1)}>1</button></li>}
        {startPage > 2 && <li className="ellipsis">...</li>}
        {pageNumbers.map(number => (
          <li key={number} className={currentPage === number ? 'active' : ''}>
            <button onClick={() => paginate(number)}>
              {number}
            </button>
          </li>
        ))}
        {endPage < totalPages - 1 && <li className="ellipsis">...</li>}
        {endPage < totalPages && <li><button onClick={() => paginate(totalPages)}>{totalPages}</button></li>}
        <li className={currentPage === totalPages ? 'disabled' : ''}>
          <button onClick={() => paginate(currentPage + 1)} disabled={currentPage === totalPages}>
            Next
          </button>
        </li>
      </ul>
    </nav>
  );
};
```

This updated pagination component and CSS will:

1. Align the pagination buttons properly
2. Add "Previous" and "Next" buttons
3. Limit the number of visible page buttons to prevent overcrowding
4. Add ellipsis (...) when there are many pages
5. Highlight the current page
6. Disable "Previous" on the first page and "Next" on the last page

These changes should make your pagination look much more like the one in your image, with a cleaner and more professional appearance.