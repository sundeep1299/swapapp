# ChatBot Component Documentation

## Table of Contents
1. [Overview](#overview)
2. [Component Architecture](#component-architecture)
3. [File Structure](#file-structure)
4. [Component Details](#component-details)
5. [State Management](#state-management)
6. [Styling System](#styling-system)
7. [Props Interface](#props-interface)
8. [Usage Guide](#usage-guide)
9. [Customization](#customization)
10. [Troubleshooting](#troubleshooting)

## Overview

The ChatBot is a floating chat interface component built with React. It provides a modern, responsive chat experience with a toggle button that expands into a full chat window.

### Key Features
- Floating action button
- Expandable chat window
- Message history
- Real-time message sending
- Responsive design
- Customizable styling
- Error handling

## Component Architecture

```
ChatBot (Main Container)
├── ChatButton (Toggle Button)
└── ChatWindow (Chat Interface)
    ├── Header
    ├── MessageList
    │   └── Message (Individual Messages)
    └── Input Area
```

## File Structure

```
src/
  components/
    ChatBot/
      ChatBot.js          # Main component
      ChatWindow.js       # Chat window component
      MessageList.js      # Message list component
      Message.js          # Individual message component
      styles/
        ChatBot.css       # Main styles
        ChatWindow.css    # Window styles
        MessageList.css   # List styles
        Message.css       # Message styles
```

## Component Details

### ChatBot.js
```javascript
const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  // ...
}
```
- Main container component
- Manages global chat state
- Handles window toggle
- Controls message flow

### ChatWindow.js
```javascript
const ChatWindow = ({
  messages,
  inputMessage,
  setInputMessage,
  handleSendMessage,
  onClose
}) => {
  // ...
}
```
- Displays chat interface
- Manages input and send functionality
- Handles window close action

### MessageList.js
```javascript
const MessageList = ({ messages = [] }) => {
  return (
    <div className="message-list">
      {Array.isArray(messages) && messages.map((message, index) => (
        <Message key={`msg-${index}`} message={message} />
      ))}
    </div>
  );
}
```
- Renders message history
- Handles message list scrolling
- Manages message ordering

### Message.js
```javascript
const Message = ({ message }) => {
  if (!message || typeof message !== 'object') {
    return null;
  }
  // ...
}
```
- Renders individual messages
- Handles message styling
- Includes error handling

## State Management

### Main State Objects
```javascript
// Chat window state
const [isOpen, setIsOpen] = useState(false);

// Messages state
const [messages, setMessages] = useState([]);

// Input state
const [inputMessage, setInputMessage] = useState('');
```

### Message Object Structure
```javascript
{
  text: string,       // Message content
  sender: string,     // 'user' or 'bot'
  timestamp: string   // ISO string timestamp
}
```

## Styling System

### CSS Organization
- BEM methodology
- Component-scoped classes
- Responsive design patterns

### Class Naming Convention
```css
.chatbot               /* Component root */
.chatbot__toggle      /* Component element */
.message--user        /* Component modifier */
```

### Key Style Features
1. Position Fixed Layout
```css
.chatbot {
  position: fixed;
  bottom: 24px;
  right: 24px;
  z-index: 9999;
}
```

2. Responsive Window
```css
@media (max-width: 640px) {
  .chat-window {
    width: 100%;
    height: 100%;
    bottom: 0;
    right: 0;
  }
}
```

## Props Interface

### ChatWindow Props
```typescript
interface ChatWindowProps {
  messages: Array<{
    text: string;
    sender: 'user' | 'bot';
    timestamp: string;
  }>;
  inputMessage: string;
  setInputMessage: (message: string) => void;
  handleSendMessage: () => void;
  onClose: () => void;
}
```

### Message Props
```typescript
interface MessageProps {
  message: {
    text: string;
    sender: 'user' | 'bot';
    timestamp: string;
  };
}
```

## Usage Guide

### Basic Implementation
```javascript
import ChatBot from './components/ChatBot/ChatBot';

function App() {
  return (
    <div>
      <ChatBot />
    </div>
  );
}
```

### Custom Response Handler
```javascript
const handleSendMessage = () => {
  if (!inputMessage.trim()) return;

  const userMessage = {
    text: inputMessage.trim(),
    sender: 'user',
    timestamp: new Date().toISOString()
  };

  const newMessages = [...messages, userMessage];
  
  // Add custom response logic here
  if (inputMessage.toLowerCase().includes('help')) {
    newMessages.push({
      text: 'How can I assist you today?',
      sender: 'bot',
      timestamp: new Date().toISOString()
    });
  }

  setMessages(newMessages);
  setInputMessage('');
};
```

## Customization

### Styling Customization
1. Override default styles:
```css
.chatbot__toggle {
  background-color: #your-color;
}
```

2. Modify animations:
```css
@keyframes slideUp {
  /* Custom animation keyframes */
}
```

### Behavior Customization
```javascript
// Custom message handler
const handleMessage = (message) => {
  // Add custom logic
};

// Custom validation
const validateMessage = (message) => {
  // Add validation rules
};
```

## Troubleshooting

### Common Issues

1. Undefined Sender Property
```javascript
// Problem
Cannot read properties of undefined (reading 'sender')

// Solution
// Add null check in Message component
if (!message?.sender) return null;
```

2. Message List Not Scrolling
```javascript
// Solution
// Add overflow handling
.message-list {
  overflow-y: auto;
  max-height: calc(100% - 120px);
}
```

3. Mobile Responsiveness Issues
```css
/* Solution */
@media (max-width: 640px) {
  .chat-window {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
  }
}
```

### Best Practices

1. Error Handling
```javascript
// Always check for undefined values
if (!messages || !Array.isArray(messages)) {
  return null;
}
```

2. Performance
```javascript
// Use memoization for message list
const MemoizedMessageList = React.memo(MessageList);
```

3. Accessibility
```javascript
// Add ARIA labels
<button
  aria-label="Open chat"
  className="chatbot__toggle"
>
```

For further assistance or custom implementations, please refer to the component source code or create an issue in the repository.