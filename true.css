import requests
import json
import openpyxl
from datetime import datetime
import os
import warnings
from requests.packages.urllib3.exceptions import InsecureRequestWarning

warnings.simplefilter('ignore', InsecureRequestWarning)

def get_auth_token():
    url = "https://aexp.oktapreview.com/oauth2/aus1kh0oh8jY8jwqJ0h8/v1/token"
    payload = 'username=svc.aj.aida-lumi-api&password=A!daLum1&scope=openid&grant_type=password'
    headers = {
        'Authorization': 'Basic MG9hMWtoMGw2eHdBWHQ2cWswaDg=',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Cookie': 'JSESSIONID=629322A413F1640648ECAE4A6990A0EB; JSESSIONID=6D6EDD58E277FC49B9E8F56990EF858D'
    }
    response = requests.request("POST", url, headers=headers, data=payload, verify=False)
    return json.loads(response.text)['access_token']

def read_project_ids(filename="wicreate.xlsx"):
    """Read project IDs from Excel file"""
    wb = openpyxl.load_workbook(filename)
    sheet = wb.active
    project_ids = []
    
    # Find the project_id column
    headers = [cell.value for cell in sheet[1]]
    project_id_col = headers.index('project_id') + 1
    
    # Read all project IDs (excluding header)
    for row in sheet.iter_rows(min_row=2, values_only=True):
        if row[project_id_col - 1]:  # Check if project ID exists
            project_ids.append(row[project_id_col - 1])
    
    return list(set(project_ids))  # Remove duplicates

def get_prc_groups(auth_token, project_id):
    """Get PRC groups for a project"""
    url = "https://lumigcpauto.aexp.com/un/gcp/iam"
    
    payload = json.dumps({
        "scope": "projects/prj-p-au-us-ict-anlyt",
        "query": f"resource:projects/{project_id}"
    })
    
    headers = {
        'Authorization': f'Bearer {auth_token}',
        'Content-Type': 'application/json'
    }
    
    response = requests.request("POST", url, headers=headers, data=payload, verify=False)
    return response.json()

def log_prc_groups(project_id, prc_data):
    """Log PRC groups to Excel file"""
    filename = "prc_groups_log.xlsx"
    
    if os.path.exists(filename):
        wb = openpyxl.load_workbook(filename)
        ws = wb.active
    else:
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(["Timestamp", "Project ID", "PRC Groups", "Raw Response"])

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Extract PRC groups from response (you might need to adjust this based on the actual response structure)
    prc_groups = json.dumps(prc_data.get('groups', []))
    raw_response = json.dumps(prc_data)
    
    ws.append([timestamp, project_id, prc_groups, raw_response])
    wb.save(filename)
    print(f"Logged PRC groups for project {project_id}")

def main():
    # Get authentication token
    auth_token = get_auth_token()
    print("Auth Token obtained successfully.")
    
    # Read project IDs from Excel
    project_ids = read_project_ids()
    print(f"Found {len(project_ids)} unique project IDs")
    
    # Process each project ID
    for project_id in project_ids:
        print(f"\nProcessing project: {project_id}")
        
        # Get PRC groups
        try:
            prc_data = get_prc_groups(auth_token, project_id)
            print(f"Successfully retrieved PRC groups for {project_id}")
            
            # Log results
            log_prc_groups(project_id, prc_data)
            
        except Exception as e:
            print(f"Error processing project {project_id}: {str(e)}")
            # Log error to Excel
            log_prc_groups(project_id, {"error": str(e)})
        
        print("------------------------")

if __name__ == "__main__":
    main()