 Certainly! Here's the complete code for the ProjectSelection component, incorporating all the changes we've discussed:

```javascript
import React, { useState, useEffect } from 'react';
import { useAuthBlueSso } from '../components/AuthBlue/AuthBlueSSO.jsx'; // Adjust this import path as needed

const ProjectSelection = () => {
  const [resources, setResources] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const { user } = useAuthBlueSso();

  const fetchResources = async () => {
    setLoading(true);
    setError(null);
    try {
      const userId = user?.attributes?.adsid || 'vsing379'; // Use actual user ID if available
      const response = await fetch(`/terraform/automate/data_proc/${userId}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          // Add any other necessary headers, e.g., Authorization
        },
        credentials: 'include' // Include credentials if needed
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      setResources(data);
    } catch (e) {
      console.error('Error fetching resources:', e);
      setError('Failed to fetch resources. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchResources();
  }, []); // Fetch resources when component mounts

  return (
    <div>
      <h2>GCP Cluster Resources</h2>
      {loading && <p>Loading...</p>}
      {error && <p style={{color: 'red'}}>{error}</p>}
      {!loading && !error && (
        <ul>
          {resources.map((resource, index) => (
            <li key={index}>
              Name: {resource.name}, Type: {resource.type}, Created By: {resource.createdBy}
            </li>
          ))}
        </ul>
      )}
      <button onClick={fetchResources} disabled={loading}>
        Refresh Resources
      </button>
    </div>
  );
};

export default ProjectSelection;
```

Remember to also update your `package.json` to include the proxy configuration:

```json
{
  ...
  "proxy": "https://lumiqcpauto-dev.aexp.com"
}
```

This code does the following:

1. Imports necessary hooks and the AuthBlue SSO hook.
2. Sets up state for resources, loading, and error handling.
3. Implements a `fetchResources` function that makes a GET request to the API.
4. Uses `useEffect` to fetch resources when the component mounts.
5. Renders a list of resources, showing loading and error states as appropriate.
6. Provides a button to manually refresh the resources.

Make sure to adjust the import path for `useAuthBlueSso` based on your project structure. Also, you may need to add additional headers or adjust the fetch options based on your specific API requirements.

If you're still encountering issues after implementing this, it may be due to server-side configurations or authentication requirements. In that case, you might need to consult with your backend team or check the API documentation for any specific requirements.