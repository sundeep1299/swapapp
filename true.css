```python
import requests
import json
import openpyxl
import warnings
from requests.packages.urllib3.exceptions import InsecureRequestWarning

warnings.simplefilter('ignore', InsecureRequestWarning)

def read_email_from_excel(filename="prc_groups_log.xlsx"):
    """Read email IDs from the Excel file"""
    try:
        wb = openpyxl.load_workbook(filename)
        ws = wb.active
        
        # Get headers
        headers = [cell.value for cell in ws[1]]
        
        # Find Members column
        if 'Members' not in headers:
            raise ValueError("Members column not found in Excel file")
        members_col = headers.index('Members') + 1
        
        # Store email and row information
        email_data = []
        for row in range(2, ws.max_row + 1):
            email = ws.cell(row=row, column=members_col).value
            if email and email not in ['No active members found', 'No members found']:
                email_data.append({
                    'row': row,
                    'email': email.strip()
                })
        
        return email_data, wb, ws
    except Exception as e:
        print(f"Error reading Excel file: {str(e)}")
        return None, None, None

def get_adsid_from_graphql(email):
    """Make GraphQL API call to get adsId"""
    url = "https://lumienterprise.aexp.com/graphql/"
    
    # Construct the query with the email
    query = f'''query {{
        users(filter: {{email: {{equals: "{email}"}}}}) {{
            firstName
            lastName
            adsId
            employeeId
            managerId
            department
            guid
            band
            email
        }}
    }}'''
    
    payload = json.dumps({
        "query": query,
        "variables": {}
    })
    
    headers = {
        'Cookie': 'blueToken=eyJ3dWIiOiJXNzYyQTM0QDUiIjiwjYWxnIjoxYWxnI.eyJ3ZWIiOiJXNzYyQTM0QDUiLCJpc3MiOiJtMiJ9.ZT9kYW5Z',
        'Content-Type': 'application/json'
    }
    
    try:
        response = requests.request("POST", url, headers=headers, data=payload, verify=False)
        data = response.json()
        
        # Extract adsId from response
        if data and 'data' in data and 'users' in data['data'] and data['data']['users']:
            return data['data']['users'][0].get('adsId', 'Not found')
        return 'Not found'
    except Exception as e:
        print(f"Error in API call for {email}: {str(e)}")
        return 'Error'

def update_excel_with_adsid(wb, ws, row, adsid):
    """Update Excel with adsId information"""
    # Get headers
    headers = [cell.value for cell in ws[1]]
    
    # Add AdsId column if it doesn't exist
    if 'AdsId' not in headers:
        adsid_col = ws.max_column + 1
        ws.cell(row=1, column=adsid_col, value='AdsId')
    else:
        adsid_col = headers.index('AdsId') + 1
    
    # Update adsId
    ws.cell(row=row, column=adsid_col, value=adsid)
    return wb, ws

def main():
    print("Starting adsId fetch process...")
    
    # Step 1: Read emails from Excel
    email_data, wb, ws = read_email_from_excel()
    if not email_data:
        print("No emails found to process")
        return
    
    print(f"Found {len(email_data)} emails to process")
    
    # Step 2: Process each email
    for data in email_data:
        email = data['email']
        row = data['row']
        print(f"\nProcessing email: {email}")
        
        # Step 3: Get adsId from GraphQL
        adsid = get_adsid_from_graphql(email)
        print(f"Found adsId: {adsid}")
        
        # Step 4: Update Excel
        wb, ws = update_excel_with_adsid(wb, ws, row, adsid)
    
    # Step 5: Save the workbook
    try:
        wb.save("prc_groups_log.xlsx")
        print("\nSuccessfully updated Excel file with adsIds")
    except Exception as e:
        print(f"Error saving Excel file: {str(e)}")

if __name__ == "__main__":
    main()
```