// build.sbt
/*
libraryDependencies ++= Seq(
  "org.postgresql" % "postgresql" % "42.2.24",
  "com.google.cloud.sql" % "postgres-socket-factory" % "1.11.0",
  "com.google.auth" % "google-auth-library-oauth2-http" % "1.11.0"
)
*/

import com.google.auth.oauth2.GoogleCredentials
import java.sql.{Connection, DriverManager}
import scala.util.{Try, Success, Failure}
import scala.concurrent.duration._

object CloudSqlConnection {
  def getDefaultAccessToken(): Option[String] = {
    println("Start: generating access token")
    Try {
      val credentials = GoogleCredentials.getApplicationDefault()
      credentials.refreshIfExpired()
      credentials.getAccessToken.getTokenValue
    } match {
      case Success(token) =>
        println("End: generating access token")
        Some(token)
      case Failure(e) =>
        println(s"Error: generating access token: ${e.getMessage}")
        None
    }
  }

  def getDbConnection(connectionStr: String, user: String, password: String): Option[Connection] = {
    println(s"Start: getting db connection for $user")
    
    val jdbcUrl = s"jdbc:postgresql://$connectionStr/psc_test"
    val props = new java.util.Properties()
    props.setProperty("user", user)
    props.setProperty("password", password)
    props.setProperty("socketFactory", "com.google.cloud.sql.postgres.SocketFactory")
    props.setProperty("cloudSqlInstance", "prj-d-netsec:us-central1:cloudsql-with-psc")

    def tryConnect(attempts: Int): Option[Connection] = {
      if (attempts <= 0) None
      else Try {
        Class.forName("org.postgresql.Driver")
        DriverManager.getConnection(jdbcUrl, props)
      } match {
        case Success(conn) =>
          println(s"End: getting db connection for $user")
          Some(conn)
        case Failure(e) =>
          println(s"Error: getting db connection for $user: ${e.getMessage}")
          Thread.sleep(5000) // 5 second delay
          tryConnect(attempts - 1)
      }
    }

    tryConnect(5)
  }

  def main(args: Array[String]): Unit = {
    val user = "svc-prj-d-lumi-poc-prj-d-lumi-poc.iam"
    
    // Get access token and use it as password
    val password = getDefaultAccessToken().getOrElse {
      println("Failed to get access token")
      System.exit(1)
      ""
    }

    val connectionStr = "prj-d-netsec:us-central1:cloudsql-with-psc"
    
    // Attempt to connect
    val connectionOpt = getDbConnection(connectionStr, user, password)
    
    // Use the connection
    connectionOpt.foreach { conn =>
      try {
        // Do your database operations here
        println("Successfully connected to database")
      } finally {
        conn.close()
      }
    }
  }
}